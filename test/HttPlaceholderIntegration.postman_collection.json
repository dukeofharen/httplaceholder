{
	"info": {
		"_postman_id": "7152af4c-ab96-43bf-a8b0-66dd4a00b300",
		"name": "HttPlaceholder Integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0. Setup",
			"item": [
				{
					"name": "Remove old stubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}ph-api/stubs",
							"host": [
								"{{rootUrl}}ph-api"
							],
							"path": [
								"stubs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Tests",
			"item": [
				{
					"name": "1. Test with conditions",
					"item": [
						{
							"name": "0. General",
							"item": [
								{
									"name": "[Create stub] Fallback",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/yaml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: fallback\npriority: -1\ntenant: integration\nresponse:\n  text: OK FALLBACK"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test fallback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}urlthatisnotmapped",
											"host": [
												"{{rootUrl}}urlthatisnotmapped"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "1. Path",
							"item": [
								{
									"name": "[Create stub] Get with path, query and headers",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/yaml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-path-query-and-headers\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /get\n    query:\n      q1: val1\n      q2: val2\n  headers:\n    X-Header-1: value1\n    X-Header-2: value2\nresponse:\n  text: OK PATH, QUERY AND HEADERS"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Get with full path",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/yaml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-with-full-path\ntenant: integration\nconditions:\n  method: GET\n  url:\n    fullPath: /fullPath?q1=val1&q2=val2\nresponse:\n  text: OK FULL PATH"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get with path, query and headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK PATH, QUERY AND HEADERS\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Header-1",
												"value": " value1",
												"type": "text"
											},
											{
												"key": "X-Header-2",
												"value": " value2",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rootUrl}}get?q1=val1&q2=val2",
											"host": [
												"{{rootUrl}}get"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get with path, query and headers: path is incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "value1"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "value2"
											}
										],
										"url": {
											"raw": "{{rootUrl}}post?q1=val1&q2=val2",
											"host": [
												"{{rootUrl}}post"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get with path, query and headers: query is incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "value1"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "value2"
											}
										],
										"url": {
											"raw": "{{rootUrl}}get?q1=val1&q2=val3",
											"host": [
												"{{rootUrl}}get"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get with path, query and headers: header is incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "value3"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "value2"
											}
										],
										"url": {
											"raw": "{{rootUrl}}get?q1=val1&q2=val2",
											"host": [
												"{{rootUrl}}get"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get with full path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FULL PATH\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}fullPath?q1=val1&q2=val2",
											"host": [
												"{{rootUrl}}fullPath"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get with full path: path incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}fullPath?q1=val1&q2=val3",
											"host": [
												"{{rootUrl}}fullPath"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val3"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. Post with body",
							"item": [
								{
									"name": "[Create stub] Post with body condition checkers",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/yaml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: post-and-check-body\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post\n  body:\n    - \\bvalue1\\b\n    - \\bvalue2\\b\nresponse:\n  text: OK POST AND CHECK BODY"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test post with body condition checkers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK POST AND CHECK BODY\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "value1\nvalue2"
										},
										"url": {
											"raw": "{{rootUrl}}post",
											"host": [
												"{{rootUrl}}post"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test post with body condition checkers: posted value incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "value3\nvalue2"
										},
										"url": {
											"raw": "{{rootUrl}}post",
											"host": [
												"{{rootUrl}}post"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test post with body condition checkers: method is incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "value1\nvalue2"
										},
										"url": {
											"raw": "{{rootUrl}}post",
											"host": [
												"{{rootUrl}}post"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3. XML",
							"item": [
								{
									"name": "[Create stub] XPath with namespaces specified",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/yaml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: xml-with-namespaces-specified\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-xml-with-namespaces\n  headers:\n    Content-Type: application/soap+xml; charset=utf-8\n  xpath:\n    - queryString: /soap:Envelope/soap:Body/m:GetUser/m:Username[text() = 'user1']\n      namespaces:\n        soap: http://www.w3.org/2003/05/soap-envelope\n        m: http://www.example.org/stock/GetUser\nresponse:\n  text: OK XML WITH NAMESPACES SPECIFIED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] XPath without namespaces specified",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: xml-without-namespaces-specified\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-xml-without-namespaces\n  headers:\n    Content-Type: application/soap+xml; charset=utf-8\n  xpath:\n    - queryString: /soap:Envelope/soap:Body/m:GetUser/m:Username[text() = 'user1']\nresponse:\n  text: OK XML WITHOUT NAMESPACES SPECIFIED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test XMLPath with namespaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK XML WITH NAMESPACES SPECIFIED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/soap+xml; charset=utf-8",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" \n    xmlns:m=\"http://www.example.org/stock/GetUser\">\n    <soap:Header></soap:Header>\n    <soap:Body>\n        <m:GetUser>\n            <m:Username>user1</m:Username>\n        </m:GetUser>\n    </soap:Body>\n</soap:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-xml-with-namespaces",
											"host": [
												"{{rootUrl}}post-xml-with-namespaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test XMLPath with namespaces: XPath incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/soap+xml; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" \n    xmlns:m=\"http://www.example.org/stock/GetUser\">\n    <soap:Header></soap:Header>\n    <soap:Body>\n        <m:GetUser>\n            <m:Username>user2</m:Username>\n        </m:GetUser>\n    </soap:Body>\n</soap:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-xml-with-namespaces",
											"host": [
												"{{rootUrl}}post-xml-with-namespaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test XMLPath without namespaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK XML WITHOUT NAMESPACES SPECIFIED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/soap+xml; charset=utf-8",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" \n    xmlns:m=\"http://www.example.org/stock/GetUser\">\n    <soap:Header></soap:Header>\n    <soap:Body>\n        <m:GetUser>\n            <m:Username>user1</m:Username>\n        </m:GetUser>\n    </soap:Body>\n</soap:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-xml-without-namespaces",
											"host": [
												"{{rootUrl}}post-xml-without-namespaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test XMLPath without namespaces: XPath incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/soap+xml; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" \n    xmlns:m=\"http://www.example.org/stock/GetUser\">\n    <soap:Header></soap:Header>\n    <soap:Body>\n        <m:GetUser>\n            <m:Username>user2</m:Username>\n        </m:GetUser>\n    </soap:Body>\n</soap:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-xml-without-namespaces",
											"host": [
												"{{rootUrl}}post-xml-without-namespaces"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. JSONPath",
							"item": [
								{
									"name": "[Create stub] Post with text JSONPath checker",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: post-with-text-jsonpath-checker\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-with-text-jsonpath-checker\n  headers:\n    Content-Type: application/json\n  jsonPath:\n    - \"$.phoneNumbers[?(@.type=='iPhone')]\"\nresponse:\n  text: OK WITH JSONPATH TEXT CHECKER"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Post with text and object JSONPath checker",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: post-with-text-and-object-jsonpath-checker\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-with-text-and-object-jsonpath-checker\n  headers:\n    Content-Type: application/json\n  jsonPath:\n    - '$.people[0].age'\n    - query: '$.people[0].firstName'\n      expectedValue: 'John'\nresponse:\n  text: OK WITH JSONPATH TEXT AND OBJECT CHECKER"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with text JSONPath checker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK WITH JSONPATH TEXT CHECKER\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phoneNumbers\": [\n        {\n            \"type\": \"iPhone\",\n            \"number\": \"0123-4567-8888\"\n        },\n        {\n            \"type\": \"home\",\n            \"number\": \"0123-4567-8910\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-text-jsonpath-checker",
											"host": [
												"{{rootUrl}}post-with-text-jsonpath-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with text JSONPath checker: JSON invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phoneNumbers\": [\n        {\n            \"type\": \"Android\",\n            \"number\": \"0123-4567-8888\"\n        },\n        {\n            \"type\": \"home\",\n            \"number\": \"0123-4567-8910\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-text-jsonpath-checker",
											"host": [
												"{{rootUrl}}post-with-text-jsonpath-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with text and object JSONPath checker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK WITH JSONPATH TEXT AND OBJECT CHECKER\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"people\": [\n    {\n      \"firstName\": \"John\",\n      \"age\": 29,\n      \"achievements\": [\n        {\n          \"name\": \"Just an average guy\"\n        }\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-text-and-object-jsonpath-checker",
											"host": [
												"{{rootUrl}}post-with-text-and-object-jsonpath-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with text and object JSONPath checker: text checker invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"people\": [\n    {\n      \"firstName\": \"John\",\n      \"achievements\": [\n        {\n          \"name\": \"Just an average guy\"\n        }\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-text-and-object-jsonpath-checker",
											"host": [
												"{{rootUrl}}post-with-text-and-object-jsonpath-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with text and object JSONPath checker: object checker invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"people\": [\n    {\n      \"firstName\": \"Marc\",\n      \"age\": 29,\n      \"achievements\": [\n        {\n          \"name\": \"Just an average guy\"\n        }\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-text-and-object-jsonpath-checker",
											"host": [
												"{{rootUrl}}post-with-text-and-object-jsonpath-checker"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5. JSON",
							"item": [
								{
									"name": "[Create stub] Post with JSON object checker",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: post-with-json-object-checker\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-with-json-object-checker\n  json:\n    strValue: stringInput\n    boolValue: true\n    doubleValue: 1.23\n    dateTimeValue: 2021-04-18T13:14:10\n    intValue: 4\n    nullValue: null\n    subObject:\n      subObjKey1: subVal1\n      subObjKey2: subVal2\n    arrayValue:\n      - val1\n      - val2\n      - subKey1: subVal1\n        subKey2: subVal2\nresponse:\n  text: OK POST WITH JSON OBJECT CHECKER"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Post with JSON array checker",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: post-with-json-array-checker\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-with-json-array-checker\n  json:\n    - stringInput\n    - true\n    - 1.23\n    - 2021-04-18T13:14:10\n    - 4\n    - subObjKey1: subVal1\n      subObjKey2: subVal2\n    - - val1\n      - val2\n      - subKey1: subVal1\n        subKey2: subVal2\nresponse:\n  text: OK POST WITH JSON ARRAY CHECKER"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST JSON object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK POST WITH JSON OBJECT CHECKER\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strValue\": \"stringInput\",\n    \"boolValue\": true,\n    \"doubleValue\": 1.23,\n    \"dateTimeValue\": \"2021-04-18T13:14:10\",\n    \"intValue\": 4,\n    \"nullValue\": null,\n    \"subObject\": {\n        \"subObjKey1\": \"subVal1\",\n        \"subObjKey2\": \"subVal2\"\n    },\n    \"arrayValue\": [\n        \"val1\",\n        \"val2\",\n        {\n            \"subKey1\": \"subVal1\",\n            \"subKey2\": \"subVal2\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-json-object-checker",
											"host": [
												"{{rootUrl}}post-with-json-object-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST JSON object: JSON is incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strValue\": \"stringInput\",\n    \"boolValue\": true,\n    \"doubleValue\": 1.23,\n    \"dateTimeValue\": \"2021-04-18T13:14:10\",\n    \"intValue\": 4,\n    \"nullValue\": null,\n    \"subObject\": {\n        \"subObjKey1\": \"subVal1\",\n        \"subObjKey2\": \"subVal2\"\n    },\n    \"arrayValue\": [\n        \"val1\",\n        \"val2\",\n        {\n            \"subKey1\": \"subVal3\",\n            \"subKey2\": \"subVal2\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-json-object-checker",
											"host": [
												"{{rootUrl}}post-with-json-object-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST JSON array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK POST WITH JSON ARRAY CHECKER\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"stringInput\",\n    true,\n    1.23,\n    \"2021-04-18T13:14:10\",\n    4,\n    {\n        \"subObjKey1\": \"subVal1\",\n        \"subObjKey2\": \"subVal2\"\n    },\n    [\n        \"val1\",\n        \"val2\",\n        {\n            \"subKey1\": \"subVal1\",\n            \"subKey2\": \"subVal2\"\n        }\n    ]\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-json-array-checker",
											"host": [
												"{{rootUrl}}post-with-json-array-checker"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST JSON array: JSON is incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"stringInput\",\n    true,\n    1.23,\n    \"2021-04-18T13:14:11\",\n    4,\n    {\n        \"subObjKey1\": \"subVal1\",\n        \"subObjKey2\": \"subVal2\"\n    },\n    [\n        \"val1\",\n        \"val2\",\n        {\n            \"subKey1\": \"subVal1\",\n            \"subKey2\": \"subVal2\"\n        }\n    ]\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}post-with-json-array-checker",
											"host": [
												"{{rootUrl}}post-with-json-array-checker"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "6. Authentication",
							"item": [
								{
									"name": "[Create stub] Get with basic authentication",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-with-basic-auth\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /basic-auth\n  basicAuthentication:\n    username: user1\n    password: 'Secret1!'\nresponse:\n  text: OK BASIC AUTH"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with basic authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK BASIC AUTH\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Secret1!",
													"type": "string"
												},
												{
													"key": "username",
													"value": "user1",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}basic-auth",
											"host": [
												"{{rootUrl}}basic-auth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with basic authentication: invalid credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "wrongpassword",
													"type": "string"
												},
												{
													"key": "username",
													"value": "user1",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}basic-auth",
											"host": [
												"{{rootUrl}}basic-auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "7. Client IP",
							"item": [
								{
									"name": "[Create stub] Get with client IP check",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-with-client-ip-check\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /single-client-ip\n  clientIp: 11.22.33.44\nresponse:\n  text: OK CLIENT IP CHECK"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Get with client IP range",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-with-client-ip-range\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /client-ip-range\n  clientIp: 11.22.33.00/30\nresponse:\n  text: OK CLIENT IP CHECK RANGE"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with client IP check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK CLIENT IP CHECK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Forwarded-For",
												"value": "11.22.33.44",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rootUrl}}single-client-ip",
											"host": [
												"{{rootUrl}}single-client-ip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with client IP check: IP incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Forwarded-For",
												"type": "text",
												"value": "11.22.33.55"
											}
										],
										"url": {
											"raw": "{{rootUrl}}single-client-ip",
											"host": [
												"{{rootUrl}}single-client-ip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with client IP range check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK CLIENT IP CHECK RANGE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Forwarded-For",
												"type": "text",
												"value": "11.22.33.3"
											}
										],
										"url": {
											"raw": "{{rootUrl}}client-ip-range",
											"host": [
												"{{rootUrl}}client-ip-range"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with client IP range check: IP incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Forwarded-For",
												"type": "text",
												"value": "11.22.33.4"
											}
										],
										"url": {
											"raw": "{{rootUrl}}client-ip-range",
											"host": [
												"{{rootUrl}}client-ip-range"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "8. Hostname",
							"item": [
								{
									"name": "[Create stub] Get with hostname",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-with-hostname\ntenant: integration\nconditions:\n  url:\n    path: /get-with-hostname\n  method: GET\n  host: httplaceholder.local\nresponse:\n  text: OK HOSTNAME"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with hostname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK HOSTNAME\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Host",
												"value": "httplaceholder.local",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rootUrl}}get-with-hostname",
											"host": [
												"{{rootUrl}}get-with-hostname"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with hostname: hostname incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Host",
												"type": "text",
												"value": "incorrect.local"
											}
										],
										"url": {
											"raw": "{{rootUrl}}get-with-hostname",
											"host": [
												"{{rootUrl}}get-with-hostname"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9. Priority",
							"item": [
								{
									"name": "[Create stub] Priority scenario 1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: priority-1\ntenant: integration\npriority: 1\nconditions:\n  url:\n    path: /priority\n  method: GET\nresponse:\n  text: OK PRIO 1"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Priority scenario 2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: priority-2\ntenant: integration\npriority: 2\nconditions:\n  url:\n    path: /priority\n  method: GET\nresponse:\n  text: OK PRIO 2"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK PRIO 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}priority",
											"host": [
												"{{rootUrl}}priority"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "10. Form",
							"item": [
								{
									"name": "[Create stub] Post with form",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: post-with-form\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /post-with-form\n  form:\n    - key: key1\n      value: val1\n    - key: key2\n      value: val2-1\n    - key: key2\n      value: val2-2\nresponse:\n  text: OK FORM"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with form data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FORM\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "key1",
													"value": "val1",
													"type": "text"
												},
												{
													"key": "key2",
													"value": "val2-1",
													"type": "text"
												},
												{
													"key": "key2",
													"value": "val2-2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{rootUrl}}post-with-form",
											"host": [
												"{{rootUrl}}post-with-form"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test POST with form data: incorrect form data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "key1",
													"value": "val1",
													"type": "text"
												},
												{
													"key": "key2",
													"value": "val2-1",
													"type": "text"
												},
												{
													"key": "key2",
													"value": "val2-3",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{rootUrl}}post-with-form",
											"host": [
												"{{rootUrl}}post-with-form"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "11. HTTPS",
							"item": [
								{
									"name": "[Create stub] Get with HTTPS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: get-with-https\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /ishttps\n    isHttps: true\nresponse:\n  text: OK HTTPS"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with HTTPS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK HTTPS\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrlHttps}}ishttps",
											"host": [
												"{{rootUrlHttps}}ishttps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test GET with HTTPS: not HTTPS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ishttps",
											"host": [
												"{{rootUrl}}ishttps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "12. Enable/disable",
							"item": [
								{
									"name": "[Create stub] Add \"enabled\" stub",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: enable-disable-stub\nenabled: true\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /enabled-or-disabled\nresponse:\n  text: OK STUB IS ENABLED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test call GET: stub is enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STUB IS ENABLED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}enabled-or-disabled",
											"host": [
												"{{rootUrl}}enabled-or-disabled"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Update stub] Disable stub",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: enable-disable-stub\nenabled: false\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /enabled-or-disabled\nresponse:\n  text: OK STUB IS ENABLED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test call GET: stub is disabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK FALLBACK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}enabled-or-disabled",
											"host": [
												"{{rootUrl}}enabled-or-disabled"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "13. Scenarios with hit counter",
							"item": [
								{
									"name": "Reset scenarios",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-min-hits-only-get\nscenario: min-hits\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /scenario-min-hits\nresponse:\n  text: OK HITS ARE INCREASED (MIN HITS)"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub in \"min-hits\" scenario",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-min-hits-only-get\nscenario: min-hits\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /scenario-min-hits\nresponse:\n  text: OK HITS ARE INCREASED (MIN HITS)"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub with \"minHits\" check",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-min-hits\nscenario: min-hits\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    minHits: 2\n  url:\n    path: /scenario-min-hits\nresponse:\n  text: OK MIN HITS IS REACHED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub in \"max-hits\" scenario",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-max-hits-only-get\nscenario: max-hits\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /scenario-max-hits\nresponse:\n  text: OK MAX HITS EXCEEDED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub with \"maxHits\" check",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-max-hits\nscenario: max-hits\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    maxHits: 2\n  url:\n    path: /scenario-max-hits\nresponse:\n  text: OK MAX HITS"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub in \"exact-hits\" scenario",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-exact-hits-only-get\nscenario: exact-hits\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /scenario-exact-hits\nresponse:\n  text: OK EXACT HITS CONDITION NOT MET"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub with \"exactHits\" check",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-exact-hits\nscenario: exact-hits\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    exactHits: 2\n  url:\n    path: /scenario-exact-hits\nresponse:\n  text: OK EXACT HITS MET"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: min hit count not reached yet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK HITS ARE INCREASED (MIN HITS)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-min-hits",
											"host": [
												"{{rootUrl}}scenario-min-hits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: min hit count reached",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK MIN HITS IS REACHED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-min-hits",
											"host": [
												"{{rootUrl}}scenario-min-hits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: max hit count not reached yet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK MAX HITS\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-max-hits",
											"host": [
												"{{rootUrl}}scenario-max-hits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: max hit count exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK MAX HITS EXCEEDED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-max-hits",
											"host": [
												"{{rootUrl}}scenario-max-hits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: exact hits not met",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK EXACT HITS CONDITION NOT MET\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-exact-hits",
											"host": [
												"{{rootUrl}}scenario-exact-hits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: exact hits met",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK EXACT HITS MET\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-exact-hits",
											"host": [
												"{{rootUrl}}scenario-exact-hits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test get: exact hits not met",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK EXACT HITS CONDITION NOT MET\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}scenario-exact-hits",
											"host": [
												"{{rootUrl}}scenario-exact-hits"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "14. Scenarios with state checking",
							"item": [
								{
									"name": "Reset scenarios",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-min-hits-only-get\nscenario: min-hits\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /scenario-min-hits\nresponse:\n  text: OK HITS ARE INCREASED (MIN HITS)"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add first state checking stub",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-state-checking-1\nscenario: state-checking\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    scenarioState: Start\n  url:\n    path: /state-checking\nresponse:\n  text: OK STATE IS STARTED"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add second state checking stub",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-state-checking-2\nscenario: state-checking\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    scenarioState: state-1\n  url:\n    path: /state-checking\nresponse:\n  text: OK STATE IS STATE 1"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test: first state",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STATE IS STARTED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}state-checking",
											"host": [
												"{{rootUrl}}state-checking"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set scenario to another state",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"state\": \"state-1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios/state-checking",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios",
												"state-checking"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test: second state",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STATE IS STATE 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}state-checking",
											"host": [
												"{{rootUrl}}state-checking"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "2. Test with responses",
					"item": [
						{
							"name": "1. Slow request",
							"item": [
								{
									"name": "[Create stub] Slow request",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: slow-request\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /slow-request\nresponse:\n  extraDuration: 1000\n  text: OK SLOW REQUEST"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test slow request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK SLOW REQUEST\");",
													"});",
													"",
													"pm.test(\"Request is very slow\", function() {",
													"    pm.expect(pm.response.responseTime).to.be.gte(1000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}slow-request",
											"host": [
												"{{rootUrl}}slow-request"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. Redirects",
							"item": [
								{
									"name": "[Create stub] Temporary redirect",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: temporary-redirect\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/temp-redirect$\nresponse:\n  temporaryRedirect: {{rootUrl}}temp-redirect-location"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Temporary redirect location",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: temporary-redirect-location\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/temp-redirect-location$\nresponse:\n  text: OK TEMP REDIRECT"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Permanent redirect",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: permanent-redirect\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/permanent-redirect$\nresponse:\n  permanentRedirect: {{rootUrl}}permanent-redirect-location"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Permanent redirect location",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: permanent-redirect-location\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/permanent-redirect-location$\nresponse:\n  text: OK PERMANENT REDIRECT"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test temp redirect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK TEMP REDIRECT\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}temp-redirect",
											"host": [
												"{{rootUrl}}temp-redirect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test permanent redirect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK PERMANENT REDIRECT\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}permanent-redirect",
											"host": [
												"{{rootUrl}}permanent-redirect"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3. Response types",
							"item": [
								{
									"name": "[Create stub] Text response type",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: text-response-type\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/text-response-type$\nresponse:\n  text: OK TEXT RESPONSE"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] JSON response type",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: json-response-type\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/json-response-type$\nresponse:\n  json: |\n    {\n        \"key1\": \"val1\"\n    }"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] XML response type",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: xml-response-type\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/xml-response-type$\nresponse:\n  xml: <xml>value</xml>"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] HTML response type",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: html-response-type\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/html-response-type$\nresponse:\n  html: <html>value</html>"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test text response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK TEXT RESPONSE\");",
													"});",
													"pm.test(\"Content-Type is text/plain\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"text/plain\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}text-response-type",
											"host": [
												"{{rootUrl}}text-response-type"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test JSON response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"JSON is correct\", function () {",
													"    const json = pm.response.json();",
													"    pm.expect(json.key1).to.eql(\"val1\");",
													"});",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}json-response-type",
											"host": [
												"{{rootUrl}}json-response-type"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test XML response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"XML is correct\", function () {",
													"    pm.response.to.have.body(\"<xml>value</xml>\");",
													"});",
													"pm.test(\"Content-Type is text/xml\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"text/xml\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}xml-response-type",
											"host": [
												"{{rootUrl}}xml-response-type"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test HTML response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"HTML is correct\", function () {",
													"    pm.response.to.have.body(\"<html>value</html>\");",
													"});",
													"pm.test(\"Content-Type is text/html\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"text/html\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}html-response-type",
											"host": [
												"{{rootUrl}}html-response-type"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Status code",
							"item": [
								{
									"name": "[Create stub] Status code",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: status-code\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/status-code$\nresponse:\n  statusCode: 401\n  text: UNAUTHORIZED!"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"UNAUTHORIZED!\");",
													"});",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}status-code",
											"host": [
												"{{rootUrl}}status-code"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5. Response headers",
							"item": [
								{
									"name": "[Create stub] Response headers",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: response-headers\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: ^/response-headers$\nresponse:\n  text: OK RESPONSE HEADERS\n  headers:\n    X-Header-1: val1\n    X-Header-2: val2"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test response headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK RESPONSE HEADERS\");",
													"});",
													"",
													"pm.test(\"Contains correct response headers\", function () {",
													"    pm.expect(pm.response.headers.get('X-Header-1')).to.eql(\"val1\");",
													"    pm.expect(pm.response.headers.get('X-Header-2')).to.eql(\"val2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}response-headers",
											"host": [
												"{{rootUrl}}response-headers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "6. Images",
							"item": [
								{
									"name": "[Create stub] Image png",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: image-png\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /image.png\nresponse:\n  image:\n    type: png\n    width: 1024\n    height: 256\n    backgroundColor: '#ffa0d3'\n    text: Placeholder text that will be drawn in the image\n    fontSize: 10\n    jpegQuality: 95\n    wordWrap: false"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Image bmp",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: image-bmp\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /image.bmp\nresponse:\n  image:\n    type: bmp\n    width: 1024\n    height: 256\n    backgroundColor: '#ffa0d3'\n    text: Placeholder text that will be drawn in the image\n    fontSize: 10\n    jpegQuality: 95\n    wordWrap: false"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Image jpg",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: image-jpg\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /image.jpg\nresponse:\n  image:\n    type: jpeg\n    width: 1024\n    height: 256\n    backgroundColor: '#ffa0d3'\n    text: Placeholder text that will be drawn in the image\n    fontSize: 10\n    jpegQuality: 95\n    wordWrap: false"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Image gif",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: image-gif\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /image.gif\nresponse:\n  image:\n    type: gif\n    width: 1024\n    height: 256\n    backgroundColor: '#ffa0d3'\n    text: Placeholder text that will be drawn in the image\n    fontSize: 10\n    jpegQuality: 95\n    wordWrap: false"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test image png",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response contains image\", function() {",
													"    pm.expect(pm.response.responseSize).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Contains correct content type header\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"image/png\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}image.png",
											"host": [
												"{{rootUrl}}image",
												"png"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test image bmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response contains image\", function() {",
													"    pm.expect(pm.response.responseSize).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Contains correct content type header\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"image/bmp\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}image.bmp",
											"host": [
												"{{rootUrl}}image",
												"bmp"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test image jpg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response contains image\", function() {",
													"    pm.expect(pm.response.responseSize).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Contains correct content type header\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"image/jpeg\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}image.jpg",
											"host": [
												"{{rootUrl}}image",
												"jpg"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test image gif",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response contains image\", function() {",
													"    pm.expect(pm.response.responseSize).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Contains correct content type header\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"image/gif\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}image.gif",
											"host": [
												"{{rootUrl}}image",
												"gif"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "7. Line endings",
							"item": [
								{
									"name": "[Create stub] Unix line endings",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: unix-line-endings\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /unix-line-endings\nresponse:\n  lineEndings: unix\n  text: |\n    text\n    with\n    unix\n    line\n    endings"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Windows line endings",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: windows-line-endings\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /windows-line-endings\nresponse:\n  lineEndings: windows\n  text: |\n    text\n    with\n    windows\n    line\n    endings"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test Unix line endings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"text\\nwith\\nunix\\nline\\nendings\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}unix-line-endings",
											"host": [
												"{{rootUrl}}unix-line-endings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test Windows line endings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"text\\r\\nwith\\r\\nwindows\\r\\nline\\r\\nendings\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}windows-line-endings",
											"host": [
												"{{rootUrl}}windows-line-endings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "8. Dynamic mode",
							"item": [
								{
									"name": "[Create stub] UUID",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-uuid\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /dynamic-mode-uuid\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-Uuid: ((uuid))\n  text: ((uuid))"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Query string",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-query-string\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /dynamic-mode-query-string\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-QueryString: 'Query string header: ((query:q1))'\n  text: 'Query string: ((query:q2))'"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Request headers",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-request-headers\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /dynamic-mode-request-headers\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-RequestHeader: 'Request header in header: ((request_header:X-Header-1))'\n  text: 'Request header: ((request_header:X-Header-2))'"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Form post",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-form-post\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /dynamic-mode-form-post\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-FormPost: 'Header form post: ((form_post:var1))'\n  text: 'Form post: ((form_post:var2))'"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Request body",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-request-body\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /dynamic-mode-request-body\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-RequestBody: 'Header request body: ((request_body))'\n  text: 'Request body: ((request_body))'"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Display URL",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-display-url\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /dynamic-mode-display-url\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-DisplayUrl: 'Header display url: ((display_url))'\n  text: 'Display url: ((display_url))'"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Client IP",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-client-ip\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /dynamic-mode-client-ip\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-ClientIp: 'Header client ip: ((client_ip))'\n  text: 'Client ip: ((client_ip))'"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Date/time",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-date-time\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /dynamic-mode-date-time\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-DateTime: ((utcnow:yyyy-MM-dd HH:mm:ss))\n  text: ((localnow:yyyy-MM-dd HH:mm:ss))"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] JSONPath",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: dynamic-mode-jsonpath\ntenant: integration\nconditions:\n  method: POST\n  url:\n    path: /dynamic-mode-jsonpath\nresponse:\n  enableDynamicMode: true\n  headers:\n    X-Value: ((jsonpath:$.values[1].title))\n  text: ((jsonpath:$.values[1].title))"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const uuidRegex = /\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b/",
													"pm.test(\"Body is correct\", function () {",
													"    pm.expect(pm.response.text()).to.match(uuidRegex);",
													"});",
													"",
													"pm.test(\"Contains correct header\", function () {",
													"    pm.expect(pm.response.headers.get('X-Uuid')).to.match(uuidRegex);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-uuid",
											"host": [
												"{{rootUrl}}dynamic-mode-uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test query string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Query string: val2\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-QueryString')).is.eq(\"Query string header: val1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-query-string?q1=val1&q2=val2",
											"host": [
												"{{rootUrl}}dynamic-mode-query-string"
											],
											"query": [
												{
													"key": "q1",
													"value": "val1"
												},
												{
													"key": "q2",
													"value": "val2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test request headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Request header: val2\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-RequestHeader')).is.eq(\"Request header in header: val1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "val1"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "val2"
											}
										],
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-request-headers",
											"host": [
												"{{rootUrl}}dynamic-mode-request-headers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test form post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Form post: val2\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-FormPost')).is.eq(\"Header form post: val1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "val1"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "val2"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "var1",
													"value": "val1",
													"type": "text"
												},
												{
													"key": "var2",
													"value": "val2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-form-post",
											"host": [
												"{{rootUrl}}dynamic-mode-form-post"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Request body: the posted body\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-RequestBody')).is.eq(\"Header request body: the posted body\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "val1"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "val2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "the posted body"
										},
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-request-body",
											"host": [
												"{{rootUrl}}dynamic-mode-request-body"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test display URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expectedDisplayUrl = pm.collectionVariables.get(\"rootUrl\") + \"dynamic-mode-display-url?q1=var1&q2=var2\";",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Display url: \" + expectedDisplayUrl);",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-DisplayUrl')).is.eq(\"Header display url: \" + expectedDisplayUrl);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Header-1",
												"type": "text",
												"value": "val1"
											},
											{
												"key": "X-Header-2",
												"type": "text",
												"value": "val2"
											}
										],
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-display-url?q1=var1&q2=var2",
											"host": [
												"{{rootUrl}}dynamic-mode-display-url"
											],
											"query": [
												{
													"key": "q1",
													"value": "var1"
												},
												{
													"key": "q2",
													"value": "var2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test client IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Client ip: 11.22.33.44\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-ClientIp')).is.eq(\"Header client ip: 11.22.33.44\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Forwarded-For",
												"value": "11.22.33.44",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-client-ip",
											"host": [
												"{{rootUrl}}dynamic-mode-client-ip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test date/time",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const dateTimeRegex = /\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/",
													"pm.test(\"Body is correct\", function () {",
													"    pm.expect(pm.response.text()).to.match(dateTimeRegex);",
													"});",
													"",
													"pm.test(\"Contains correct header\", function () {",
													"    pm.expect(pm.response.headers.get('X-DateTime')).to.match(dateTimeRegex);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Forwarded-For",
												"type": "text",
												"value": "11.22.33.44"
											}
										],
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-date-time",
											"host": [
												"{{rootUrl}}dynamic-mode-date-time"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test JSONPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"Value2\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-Value')).is.eq(\"Value2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"values\": [\n        {\n            \"title\": \"Value1\"\n        },\n        {\n            \"title\": \"Value2\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}dynamic-mode-jsonpath",
											"host": [
												"{{rootUrl}}dynamic-mode-jsonpath"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9. Reverse proxy",
							"item": [
								{
									"name": "[Create stub] Reverse proxy",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: reverse-proxy\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /reverse-proxy\nresponse:\n  reverseProxy:\n    url: {{rootUrl}}proxy-destination\n    appendPath: true\n    appendQueryString: true\n    replaceRootUrl: true"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Reverse proxy destination",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: reverse-proxy-destination\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /proxy-destination\nresponse:\n  text: REVERSE PROXY DESTINATION\n  headers:\n    X-Proxy-1: REVERSE PROXY HEADER"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test reverse proxy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"REVERSE PROXY DESTINATION\");",
													"});",
													"",
													"pm.test(\"Header is correct\", function () {",
													"    pm.expect(pm.response.headers.get('X-Proxy-1')).is.eq(\"REVERSE PROXY HEADER\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}reverse-proxy",
											"host": [
												"{{rootUrl}}reverse-proxy"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "10. Scenario state",
							"item": [
								{
									"name": "Reset scenarios",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-min-hits-only-get\nscenario: min-hits\ntenant: integration\nconditions:\n  method: GET\n  url:\n    path: /scenario-min-hits\nresponse:\n  text: OK HITS ARE INCREASED (MIN HITS)"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub that sets state",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-state-updating-1\nscenario: state-updating\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    scenarioState: Start\n  url:\n    path: /state-updating\nresponse:\n  text: OK STATE IS UPDATED\n  scenario:\n    setScenarioState: NewState"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Create stub] Add stub that clears state",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "id: scenario-state-updating-2\nscenario: state-updating\ntenant: integration\nconditions:\n  method: GET\n  scenario:\n    scenarioState: NewState\n  url:\n    path: /state-updating\nresponse:\n  text: OK STATE IS CLEARED\n  scenario:\n    clearState: true"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "First request: state is updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STATE IS UPDATED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}state-updating",
											"host": [
												"{{rootUrl}}state-updating"
											]
										}
									},
									"response": []
								},
								{
									"name": "Second request: state is cleared",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STATE IS CLEARED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}state-updating",
											"host": [
												"{{rootUrl}}state-updating"
											]
										}
									},
									"response": []
								},
								{
									"name": "Third request: state is updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STATE IS UPDATED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}state-updating",
											"host": [
												"{{rootUrl}}state-updating"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fourth request: state is cleared",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"OK STATE IS CLEARED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}state-updating",
											"host": [
												"{{rootUrl}}state-updating"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "3. Test with API",
					"item": [
						{
							"name": "1. Add stub",
							"item": [
								{
									"name": "Add stub with validation error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const result = pm.response.json();",
													"",
													"pm.test(\"Has correct validation errors\", function () {",
													"    pm.expect(result.length).to.be.eq(2);",
													"    pm.expect(result[0]).to.be.eq(\"The Id field is required.\");",
													"    pm.expect(result[1]).to.be.eq(\"Field 'StatusCode' should be between '100' and '599'.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "tenant: integration\nconditions:\n  method: GET\n  url:\n    path: /bla\nresponse:\n  statusCode: 600"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs/stub-1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs",
												"stub-1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. Update stub",
							"item": [
								{
									"name": "Update stub with validation error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const result = pm.response.json();",
													"",
													"pm.test(\"Has correct validation errors\", function () {",
													"    pm.expect(result.length).to.be.eq(2);",
													"    pm.expect(result[0]).to.be.eq(\"The Id field is required.\");",
													"    pm.expect(result[1]).to.be.eq(\"Field 'StatusCode' should be between '100' and '599'.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "text/yaml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "tenant: integration\nconditions:\n  method: GET\n  url:\n    path: /bla\nresponse:\n  statusCode: 600"
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "3. Delete request",
							"item": [
								{
									"name": "Do request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"corrId\", pm.response.headers.get('x-httplaceholder-correlation'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}some-request",
											"host": [
												"{{rootUrl}}some-request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete request: expect 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/requests/{{corrId}}",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"requests",
												"{{corrId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete request: expect 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/requests/{{corrId}}",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"requests",
												"{{corrId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Scenarios",
							"item": [
								{
									"name": "Reset scenarios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"state\": \"new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get scenario: not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios",
												"scenario-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set scenario",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"state\": \"new-state\",\n    \"hitCount\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios",
												"scenario-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get scenario: found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Check scenario name\", function () {",
													"    pm.expect(jsonData.scenario).to.eql(\"scenario-1\");",
													"});",
													"pm.test(\"Check scenario state\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"new-state\");",
													"});",
													"pm.test(\"Check scenario hit count\", function () {",
													"    pm.expect(jsonData.hitCount).to.eql(10);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios",
												"scenario-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all scenarios: has 1 result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Has exactly 1 element\", function () {",
													"    pm.expect(jsonData.length).to.eql(1);",
													"});",
													"pm.test(\"Check scenario name\", function () {",
													"    pm.expect(jsonData[0].scenario).to.eql(\"scenario-1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete scenario",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios",
												"scenario-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete scenario: not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios",
												"scenario-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all scenarios: has no results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Has exactly 1 element\", function () {",
													"    pm.expect(jsonData.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/scenarios",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5. Stub generation based on request",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Remove old stubs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}ph-api/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"stubs"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Basic auth",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "test-pass",
															"type": "string"
														},
														{
															"key": "username",
															"value": "test-user",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}basic-auth",
													"host": [
														"{{rootUrl}}basic-auth"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const basicAuth = jsonData.stub.conditions.basicAuthentication;",
															"    pm.expect(basicAuth.username).to.eql(\"test-user\");",
															"    pm.expect(basicAuth.password).to.eql(\"test-pass\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "test-pass",
															"type": "string"
														},
														{
															"key": "username",
															"value": "test-user",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}basic-auth",
													"host": [
														"{{rootUrl}}basic-auth"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Request body",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "test-pass",
															"type": "string"
														},
														{
															"key": "username",
															"value": "test-user",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "Some request body",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}request-body",
													"host": [
														"{{rootUrl}}request-body"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const body = jsonData.stub.conditions.body;",
															"    pm.expect(body.length).to.eql(1);",
															"    pm.expect(body[0]).to.eql(\"Some request body\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "test-pass",
															"type": "string"
														},
														{
															"key": "username",
															"value": "test-user",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "Some request body",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}request-body",
													"host": [
														"{{rootUrl}}request-body"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Request headers",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "test-pass",
															"type": "string"
														},
														{
															"key": "username",
															"value": "test-user",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Header-1",
														"value": "value1",
														"type": "text"
													},
													{
														"key": "X-Header-2",
														"value": "value2",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rootUrl}}request-headers",
													"host": [
														"{{rootUrl}}request-headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const headers = jsonData.stub.conditions.headers;",
															"    pm.expect(headers[\"X-Header-1\"]).to.eql(\"value1\");",
															"    pm.expect(headers[\"X-Header-2\"]).to.eql(\"value2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "test-pass",
															"type": "string"
														},
														{
															"key": "username",
															"value": "test-user",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Header-1",
														"value": "value1",
														"type": "text"
													},
													{
														"key": "X-Header-2",
														"value": "value2",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rootUrl}}request-headers",
													"host": [
														"{{rootUrl}}request-headers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Host",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Host",
														"value": "httplaceholder.com",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rootUrl}}host",
													"host": [
														"{{rootUrl}}host"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const host = jsonData.stub.conditions.host;",
															"    pm.expect(host).to.eql(\"httplaceholder.com\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Host",
														"value": "httplaceholder.com",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rootUrl}}host",
													"host": [
														"{{rootUrl}}host"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTPS",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrlHttps}}https",
													"host": [
														"{{rootUrlHttps}}https"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const isHttps = jsonData.stub.conditions.url.isHttps;",
															"    pm.expect(isHttps).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrlHttps}}https",
													"host": [
														"{{rootUrlHttps}}https"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTP method",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}http-method",
													"host": [
														"{{rootUrl}}http-method"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const method = jsonData.stub.conditions.method;",
															"    pm.expect(method).to.eql(\"PATCH\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}http-method",
													"host": [
														"{{rootUrl}}http-method"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Client IP",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Forwarded-For",
														"value": "1.1.1.1",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rootUrl}}client-ip",
													"host": [
														"{{rootUrl}}client-ip"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const clientIp = jsonData.stub.conditions.clientIp;",
															"    pm.expect(clientIp).to.eql(\"1.1.1.1\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Forwarded-For",
														"value": "1.1.1.1",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rootUrl}}client-ip",
													"host": [
														"{{rootUrl}}client-ip"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Form data",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "key1",
															"value": "value1",
															"type": "text"
														},
														{
															"key": "key2",
															"value": "value2",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{rootUrl}}form-data",
													"host": [
														"{{rootUrl}}form-data"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const form = jsonData.stub.conditions.form;",
															"    pm.expect(form.length).to.eql(2);",
															"    pm.expect(form[0].key).to.eql(\"key1\");",
															"    pm.expect(form[0].value).to.eql(\"value1\");",
															"    pm.expect(form[1].key).to.eql(\"key2\");",
															"    pm.expect(form[1].value).to.eql(\"value2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "key1",
															"value": "value1",
															"type": "text"
														},
														{
															"key": "key2",
															"value": "value2",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{rootUrl}}form-data",
													"host": [
														"{{rootUrl}}form-data"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JSON",
									"item": [
										{
											"name": "Object",
											"item": [
												{
													"name": "Do request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 501\", function () {",
																	"    pm.response.to.have.status(501);",
																	"});",
																	"",
																	"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
																	"pm.environment.set(\"corrId\", corrId);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"stringValue\": \"value\",\n    \"intValue\": 42.1,\n    \"boolValue\": true,\n    \"objectValue\": {\n        \"stringValue\": \"anotherValue\"\n    },\n    \"arrayValue\": [\n        \"value1\",\n        333\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{rootUrl}}json-data",
															"host": [
																"{{rootUrl}}json-data"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create stub based on request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check generated stub\", function () {",
																	"    const jsonData = pm.response.json();",
																	"    const body = jsonData.stub.conditions.body;",
																	"    pm.expect(body).to.eql(undefined);",
																	"",
																	"    const json = jsonData.stub.conditions.json;",
																	"    pm.expect(json.stringValue).to.eql(\"value\");",
																	"    pm.expect(json.intValue).to.eql(42.1);",
																	"    pm.expect(json.boolValue).to.eql(true);",
																	"    pm.expect(json.objectValue.stringValue).to.eql(\"anotherValue\");",
																	"    pm.expect(json.arrayValue.length).to.eql(2);",
																	"    pm.expect(json.arrayValue[0]).to.eql(\"value1\");",
																	"    pm.expect(json.arrayValue[1]).to.eql(333);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"doNotCreateStub\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
															"host": [
																"{{rootUrl}}ph-api"
															],
															"path": [
																"requests",
																"{{corrId}}",
																"stubs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Do request again",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body is correct\", function () {",
																	"    pm.response.to.have.body(\"OK!\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"stringValue\": \"value\",\n    \"intValue\": 42.1,\n    \"boolValue\": true,\n    \"objectValue\": {\n        \"stringValue\": \"anotherValue\"\n    },\n    \"arrayValue\": [\n        \"value1\",\n        333\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{rootUrl}}json-data",
															"host": [
																"{{rootUrl}}json-data"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Array",
											"item": [
												{
													"name": "Do request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 501\", function () {",
																	"    pm.response.to.have.status(501);",
																	"});",
																	"",
																	"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
																	"pm.environment.set(\"corrId\", corrId);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"value1\",\n    44,\n    false,\n    {\n        \"key1\": \"val1\"\n    },\n    [\n        \"1\",\n        2\n    ]\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{rootUrl}}json-data",
															"host": [
																"{{rootUrl}}json-data"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create stub based on request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check generated stub\", function () {",
																	"    const jsonData = pm.response.json();",
																	"    const body = jsonData.stub.conditions.body;",
																	"    pm.expect(body).to.eql(undefined);",
																	"",
																	"    const json = jsonData.stub.conditions.json;",
																	"    pm.expect(json.length).to.eql(5);",
																	"    pm.expect(json[0]).to.eql(\"value1\");",
																	"    pm.expect(json[1]).to.eql(44);",
																	"    pm.expect(json[2]).to.eql(false);",
																	"    pm.expect(json[3].key1).to.eql(\"val1\");",
																	"    pm.expect(json[4].length).to.eql(2);",
																	"    pm.expect(json[4][0]).to.eql(\"1\");",
																	"    pm.expect(json[4][1]).to.eql(2);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"doNotCreateStub\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
															"host": [
																"{{rootUrl}}ph-api"
															],
															"path": [
																"requests",
																"{{corrId}}",
																"stubs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Do request again",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body is correct\", function () {",
																	"    pm.response.to.have.body(\"OK!\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"stringValue\": \"value\",\n    \"intValue\": 42.1,\n    \"boolValue\": true,\n    \"objectValue\": {\n        \"stringValue\": \"anotherValue\"\n    },\n    \"arrayValue\": [\n        \"value1\",\n        333\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{rootUrl}}json-data",
															"host": [
																"{{rootUrl}}json-data"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Path",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}uri-path",
													"host": [
														"{{rootUrl}}uri-path"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const path = jsonData.stub.conditions.url.path;",
															"    pm.expect(path).to.eql(\"/uri-path\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}uri-path",
													"host": [
														"{{rootUrl}}uri-path"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Query params",
									"item": [
										{
											"name": "Do request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"const corrId = pm.response.headers.get('X-HttPlaceholder-Correlation');",
															"pm.environment.set(\"corrId\", corrId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}query-params?key1=val1&key2=val2",
													"host": [
														"{{rootUrl}}query-params"
													],
													"query": [
														{
															"key": "key1",
															"value": "val1"
														},
														{
															"key": "key2",
															"value": "val2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create stub based on request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check generated stub\", function () {",
															"    const jsonData = pm.response.json();",
															"    const params = jsonData.stub.conditions.url.query;",
															"    pm.expect(Object.keys(params).length).to.eql(2);",
															"    pm.expect(params.key1).to.eql(\"val1\");",
															"    pm.expect(params.key2).to.eql(\"val2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"doNotCreateStub\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/requests/{{corrId}}/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"requests",
														"{{corrId}}",
														"stubs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Do request again",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"OK!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}query-params?key1=val1&key2=val2",
													"host": [
														"{{rootUrl}}query-params"
													],
													"query": [
														{
															"key": "key1",
															"value": "val1"
														},
														{
															"key": "key2",
															"value": "val2"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "6. Stub generation based on cURL command",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Remove old stubs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}ph-api/stubs",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"stubs"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Basic auth",
									"item": [
										{
											"name": "Import cURL (header)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check basic auth\", function () {",
															"    const jsonData = pm.response.json();",
															"    const basicAuth = jsonData[0].stub.conditions.basicAuthentication;",
															"    pm.expect(basicAuth.username).to.eql(\"user\");",
															"    pm.expect(basicAuth.password).to.eql(\"pass\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/api/v1/users/authenticate' \\\n  -H 'authorization: Basic dXNlcjpwYXNz' \\\n  --data-raw '{}' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Import cURL (basic auth flag)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check basic auth\", function () {",
															"    const jsonData = pm.response.json();",
															"    const basicAuth = jsonData[0].stub.conditions.basicAuthentication;",
															"    pm.expect(basicAuth.username).to.eql(\"user\");",
															"    pm.expect(basicAuth.password).to.eql(\"pass\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/api/v1/users/authenticate' \\\n  -u 'user:pass' \\\n  --data-raw '{}' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Request body",
									"item": [
										{
											"name": "Import cURL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check request body\", function () {",
															"    const jsonData = pm.response.json();",
															"    const body = jsonData[0].stub.conditions.body;",
															"    pm.expect(body.length).to.eql(1);",
															"    pm.expect(body[0]).to.eql(\"Some request body\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  -H 'Content-Type: text/plain' \\\n  --data-raw 'Some request body' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Request headers",
									"item": [
										{
											"name": "Import cURL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check request headers\", function () {",
															"    const jsonData = pm.response.json();",
															"    const headers = jsonData[0].stub.conditions.headers;",
															"    pm.expect(Object.keys(headers).length).to.eql(3);",
															"    pm.expect(headers[\"X-Header1\"]).to.eql(\"value\\\\ 1\");",
															"    pm.expect(headers[\"X-Header2\"]).to.eql(\"value\\\\ 2\");",
															"    pm.expect(headers[\"Accept-Encoding\"]).to.eql(\"deflate,\\\\ gzip,\\\\ br\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  -H 'X-Header1: value 1' \\\n  -H 'X-Header2: value 2' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Host",
									"item": [
										{
											"name": "Import cURL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check host\", function () {",
															"    const jsonData = pm.response.json();",
															"    const host = jsonData[0].stub.conditions.host;",
															"    pm.expect(host).to.eql(\"api.site.com\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTPS",
									"item": [
										{
											"name": "Import cURL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check HTTPS\", function () {",
															"    const jsonData = pm.response.json();",
															"    const isHttps = jsonData[0].stub.conditions.url.isHttps;",
															"    pm.expect(isHttps).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTP method",
									"item": [
										{
											"name": "Import cURL (POST implicit)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check implicit POST\", function () {",
															"    const jsonData = pm.response.json();",
															"    const method = jsonData[0].stub.conditions.method;",
															"    pm.expect(method).to.eql(\"POST\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  --data-raw '{}' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Import cURL (GET implicit)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check implicit GET\", function () {",
															"    const jsonData = pm.response.json();",
															"    const method = jsonData[0].stub.conditions.method;",
															"    pm.expect(method).to.eql(\"GET\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Import cURL (PUT explicit)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check explicit PUT\", function () {",
															"    const jsonData = pm.response.json();",
															"    const method = jsonData[0].stub.conditions.method;",
															"    pm.expect(method).to.eql(\"PUT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  -X 'PUT' \\\n  --data-raw '{}' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Form data",
									"item": [
										{
											"name": "Import cURL (multipart)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check form data\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const contentType = jsonData[0].stub.conditions.headers['Content-Type'];",
															"    pm.expect(contentType).to.eql(\"multipart/form-data\");",
															"",
															"    const form = jsonData[0].stub.conditions.form;",
															"    pm.expect(form.length).to.eql(2);",
															"    pm.expect(form[0].key).to.eql(\"param1\");",
															"    pm.expect(form[0].value).to.eql(\"value1\");",
															"    pm.expect(form[1].key).to.eql(\"param2\");",
															"    pm.expect(form[1].value).to.eql(\"value2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  -F 'param1=value1&param2=value2' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Import cURL (form encoded)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check form data\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const contentType = jsonData[0].stub.conditions.headers['Content-Type'];",
															"    pm.expect(contentType).to.eql(\"application/x-www-form-urlencoded\");",
															"",
															"    const form = jsonData[0].stub.conditions.form;",
															"    pm.expect(form.length).to.eql(2);",
															"    pm.expect(form[0].key).to.eql(\"param1\");",
															"    pm.expect(form[0].value).to.eql(\"value1\");",
															"    pm.expect(form[1].key).to.eql(\"param2\");",
															"    pm.expect(form[1].value).to.eql(\"value2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  -d 'param1=value1&param2=value2' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JSON",
									"item": [
										{
											"name": "Object",
											"item": [
												{
													"name": "Import cURL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check request body\", function () {",
																	"    const jsonData = pm.response.json();",
																	"    const body = jsonData[0].stub.conditions.body;",
																	"    pm.expect(body).to.eql(undefined);",
																	"",
																	"    const json = jsonData[0].stub.conditions.json;",
																	"    pm.expect(json.stringValue).to.eql(\"value\");",
																	"    pm.expect(json.intValue).to.eql(42.1);",
																	"    pm.expect(json.boolValue).to.eql(true);",
																	"    pm.expect(json.objectValue.stringValue).to.eql(\"anotherValue\");",
																	"    pm.expect(json.arrayValue.length).to.eql(2);",
																	"    pm.expect(json.arrayValue[0]).to.eql(\"value1\");",
																	"    pm.expect(json.arrayValue[1]).to.eql(333);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "curl 'https://api.site.com/json-object' \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"stringValue\":\"value\",\"intValue\":42.1,\"boolValue\":true,\"objectValue\":{\"stringValue\":\"anotherValue\"},\"arrayValue\":[\"value1\",333]}' \\\n  --compressed"
														},
														"url": {
															"raw": "{{rootUrl}}ph-api/import/curl",
															"host": [
																"{{rootUrl}}ph-api"
															],
															"path": [
																"import",
																"curl"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Array",
											"item": [
												{
													"name": "Import cURL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check request body\", function () {",
																	"    const jsonData = pm.response.json();",
																	"    const body = jsonData[0].stub.conditions.body;",
																	"    pm.expect(body).to.eql(undefined);",
																	"",
																	"    const json = jsonData[0].stub.conditions.json;",
																	"    pm.expect(json.length).to.eql(5);",
																	"    pm.expect(json[0]).to.eql(\"value1\");",
																	"    pm.expect(json[1]).to.eql(44);",
																	"    pm.expect(json[2]).to.eql(false);",
																	"    pm.expect(json[3].key1).to.eql(\"val1\");",
																	"    pm.expect(json[4].length).to.eql(2);",
																	"    pm.expect(json[4][0]).to.eql(\"1\");",
																	"    pm.expect(json[4][1]).to.eql(2);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "curl 'https://api.site.com/json-object' \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '[\"value1\",44,false,{\"key1\":\"val1\"},[\"1\",2]]' \\\n  --compressed"
														},
														"url": {
															"raw": "{{rootUrl}}ph-api/import/curl",
															"host": [
																"{{rootUrl}}ph-api"
															],
															"path": [
																"import",
																"curl"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Path",
									"item": [
										{
											"name": "Import cURL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check path\", function () {",
															"    const jsonData = pm.response.json();",
															"    const path = jsonData[0].stub.conditions.url.path;",
															"    pm.expect(path).to.eql(\"/request-path\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Query params",
									"item": [
										{
											"name": "Import cURL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check query params\", function () {",
															"    const jsonData = pm.response.json();",
															"    const query = jsonData[0].stub.conditions.url.query;",
															"    pm.expect(Object.keys(query).length).to.eql(2);",
															"    pm.expect(query.param1).to.eql(\"val1\");",
															"    pm.expect(query.param2).to.eql(\"val2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "curl 'https://api.site.com/request-path?param1=val1&param2=val2' \\\n  --compressed"
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/import/curl",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"import",
														"curl"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "7. Stub generation based on HTTP archive (HAR)",
							"item": [
								{
									"name": "Remove old stubs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import HAR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of stubs created\", function() {",
													"    pm.expect(jsonData.length).to.eql(5);",
													"});",
													"",
													"pm.test(\"Check stub 1\", function () {",
													"    const stub = jsonData[0].stub;",
													"    pm.expect(stub.id).to.eql(\"generated-24f00eecf5439f6f305a168b184339d3\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"GET\");",
													"    pm.expect(stub.conditions.url.path).to.eql(\"/\");",
													"    pm.expect(stub.conditions.url.isHttps).to.eql(true);",
													"    pm.expect(Object.keys(stub.conditions.headers).length).to.eql(14);",
													"    pm.expect(stub.conditions.headers[\"cache-control\"]).to.eql(\"no-cache\");",
													"    pm.expect(stub.conditions.host).to.eql(\"ducode.org\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(200);",
													"    pm.expect(stub.response.contentType).to.eql(\"text/html\");",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(4);",
													"    pm.expect(stub.response.headers[\"server\"]).to.eql(\"nginx\");",
													"    pm.expect(stub.response.html).to.contain(\"<!DOCTYPE html>\");",
													"});",
													"",
													"pm.test(\"Check stub 2\", function () {",
													"    const stub = jsonData[1].stub;",
													"    pm.expect(stub.id).to.eql(\"generated-09b1935bc83ba1afcfdfe613dcdcd2e3\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"GET\");",
													"    pm.expect(stub.conditions.url.path).to.eql(\"/static/style/style.css\");",
													"    pm.expect(stub.conditions.url.isHttps).to.eql(true);",
													"    pm.expect(Object.keys(stub.conditions.headers).length).to.eql(13);",
													"    pm.expect(stub.conditions.headers[\"cache-control\"]).to.eql(\"no-cache\");",
													"    pm.expect(stub.conditions.host).to.eql(\"ducode.org\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(200);",
													"    pm.expect(stub.response.contentType).to.eql(\"text/css\");",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(5);",
													"    pm.expect(stub.response.headers[\"server\"]).to.eql(\"nginx\");",
													"    pm.expect(stub.response.text).to.contain(\"@font-face\");",
													"});",
													"",
													"pm.test(\"Check stub 3\", function () {",
													"    const stub = jsonData[2].stub;",
													"    pm.expect(stub.id).to.eql(\"generated-76cff71ff1aaa9532192f64cca2958b7\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"GET\");",
													"    pm.expect(stub.conditions.url.path).to.eql(\"/static/fonts/roboto-mono.woff2\");",
													"    pm.expect(stub.conditions.url.isHttps).to.eql(true);",
													"    pm.expect(Object.keys(stub.conditions.headers).length).to.eql(14);",
													"    pm.expect(stub.conditions.headers[\"cache-control\"]).to.eql(\"no-cache\");",
													"    pm.expect(stub.conditions.host).to.eql(\"ducode.org\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(200);",
													"    pm.expect(stub.response.contentType).to.eql(\"application/octet-stream\");",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(5);",
													"    pm.expect(stub.response.headers[\"server\"]).to.eql(\"nginx\");",
													"    pm.expect(stub.response.base64).to.contain(\"d09GMgABAAAAADAYAA4AAAAAV5wAAC\");",
													"});",
													"",
													"pm.test(\"Check stub 4\", function () {",
													"    const stub = jsonData[3].stub;",
													"    pm.expect(stub.id).to.eql(\"generated-4b3af4b16f93185600d5b8803e8fd7b0\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"GET\");",
													"    pm.expect(stub.conditions.url.path).to.eql(\"/static/favicon.png\");",
													"    pm.expect(stub.conditions.url.isHttps).to.eql(true);",
													"    pm.expect(Object.keys(stub.conditions.headers).length).to.eql(13);",
													"    pm.expect(stub.conditions.headers[\"cache-control\"]).to.eql(\"no-cache\");",
													"    pm.expect(stub.conditions.host).to.eql(\"ducode.org\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(200);",
													"    pm.expect(stub.response.contentType).to.eql(\"image/png\");",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(5);",
													"    pm.expect(stub.response.headers[\"server\"]).to.eql(\"nginx\");",
													"    pm.expect(stub.response.base64).to.contain(\"iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAA\");",
													"});",
													"",
													"pm.test(\"Check stub 5\", function () {",
													"    const stub = jsonData[4].stub;",
													"    pm.expect(stub.id).to.eql(\"generated-a5c900b24f4dc4a28df93416597420e1\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"PUT\");",
													"    pm.expect(stub.conditions.url.path).to.eql(\"/api/v1/admin/users/123\");",
													"    pm.expect(stub.conditions.url.isHttps).to.eql(true);",
													"    pm.expect(Object.keys(stub.conditions.headers).length).to.eql(15);",
													"    pm.expect(stub.conditions.headers[\"Connection\"]).to.eql(\"keep-alive\");",
													"    pm.expect(stub.conditions.host).to.eql(\"api.site.com\");",
													"    pm.expect(stub.conditions.json.firstName).to.eql(\"Dukeofharen\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(204);",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(11);",
													"    pm.expect(stub.response.headers[\"server\"]).to.eql(\"nginx\");",
													"    pm.expect(stub.response.text).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"log\": {\n    \"version\": \"1.2\",\n    \"creator\": {\n      \"name\": \"WebInspector\",\n      \"version\": \"537.36\"\n    },\n    \"pages\": [\n      {\n        \"startedDateTime\": \"2021-12-28T10:27:47.140Z\",\n        \"id\": \"page_2\",\n        \"title\": \"https://ducode.org/\",\n        \"pageTimings\": {\n          \"onContentLoad\": 85.7560000004014,\n          \"onLoad\": 117.96900000081223\n        }\n      }\n    ],\n    \"entries\": [\n      {\n        \"_initiator\": {\n          \"type\": \"other\"\n        },\n        \"_priority\": \"VeryHigh\",\n        \"_resourceType\": \"document\",\n        \"cache\": {},\n        \"connection\": \"1461\",\n        \"pageref\": \"page_2\",\n        \"request\": {\n          \"method\": \"GET\",\n          \"url\": \"https://ducode.org/\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \":method\",\n              \"value\": \"GET\"\n            },\n            {\n              \"name\": \":authority\",\n              \"value\": \"ducode.org\"\n            },\n            {\n              \"name\": \":scheme\",\n              \"value\": \"https\"\n            },\n            {\n              \"name\": \":path\",\n              \"value\": \"/\"\n            },\n            {\n              \"name\": \"pragma\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"cache-control\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"sec-ch-ua\",\n              \"value\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"96\\\"\"\n            },\n            {\n              \"name\": \"sec-ch-ua-mobile\",\n              \"value\": \"?0\"\n            },\n            {\n              \"name\": \"sec-ch-ua-platform\",\n              \"value\": \"\\\"Linux\\\"\"\n            },\n            {\n              \"name\": \"upgrade-insecure-requests\",\n              \"value\": \"1\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\"\n            },\n            {\n              \"name\": \"accept\",\n              \"value\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n            },\n            {\n              \"name\": \"sec-fetch-site\",\n              \"value\": \"none\"\n            },\n            {\n              \"name\": \"sec-fetch-mode\",\n              \"value\": \"navigate\"\n            },\n            {\n              \"name\": \"sec-fetch-user\",\n              \"value\": \"?1\"\n            },\n            {\n              \"name\": \"sec-fetch-dest\",\n              \"value\": \"document\"\n            },\n            {\n              \"name\": \"accept-encoding\",\n              \"value\": \"gzip, deflate, br\"\n            },\n            {\n              \"name\": \"accept-language\",\n              \"value\": \"en-US,en;q=0.9\"\n            }\n          ],\n          \"queryString\": [],\n          \"cookies\": [],\n          \"headersSize\": -1,\n          \"bodySize\": 0\n        },\n        \"response\": {\n          \"status\": 200,\n          \"statusText\": \"\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \"server\",\n              \"value\": \"nginx\"\n            },\n            {\n              \"name\": \"date\",\n              \"value\": \"Tue, 28 Dec 2021 10:27:47 GMT\"\n            },\n            {\n              \"name\": \"content-type\",\n              \"value\": \"text/html\"\n            },\n            {\n              \"name\": \"last-modified\",\n              \"value\": \"Fri, 24 Dec 2021 08:58:27 GMT\"\n            },\n            {\n              \"name\": \"etag\",\n              \"value\": \"W/\\\"61c58bb3-cd3\\\"\"\n            },\n            {\n              \"name\": \"content-encoding\",\n              \"value\": \"gzip\"\n            }\n          ],\n          \"cookies\": [],\n          \"content\": {\n            \"size\": 3283,\n            \"mimeType\": \"text/html\",\n            \"text\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"utf-8\\\"/>\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"/>\\n    <link rel=\\\"canonical\\\" href=\\\"https://ducode.org\\\"/>\\n    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"https://ducode.org/static/style/style.css\\\"/>\\n    <link rel=\\\"shortcut icon\\\" type=\\\"image/png\\\" href=\\\"https://ducode.org/static/favicon.png\\\"/>\\n    <link rel=\\\"alternate\\\" type=\\\"application/rss+xml\\\" title=\\\"Duco's blog\\\" href=\\\"https://ducode.org/feed.xml\\\" />\\n\\n    <title>Ducode.org - Duco: (web) developer from NL</title>\\n</head>\\n<body>\\n<div class=\\\"portfolio\\\">\\n    <p>\\n        Duco, Netherlands based (web) developer, currently working for\\n        <a href=\\\"https://quintor.nl\\\">Quintor</a>. Many years of experience in the .NET stack (ASP.NET (Core), SQL\\n        Server, Windows etc.), frontend development (Vue, Angular, HTML etc.) and is currently mastering the Java stack\\n        (Spring Boot).\\n    </p>\\n    <h1>&gt; blog</h1>\\n\\n    <h2><a href=\\\"https://ducode.org/posts/dell-xps-15-9510-ubuntu-20-04-docking-station\\\">Dell XPS 15 9510 + Ubuntu 20.04 + Docking station</a> (Dec 23 &#39;21)</h2>\\n    <h2><a href=\\\"https://ducode.org/posts/this-week-i-learnt-week-37\\\">This Week I Learnt: week 37 2019</a> (Sep 16 &#39;19)</h2>\\n    <h2><a href=\\\"https://ducode.org/posts/ubuntu-18-04-unable-to-log-in\\\">Ubuntu 18.04: unable to log in after locking PC</a> (Sep 08 &#39;19)</h2>\\n    <h2><a href=\\\"https://ducode.org/posts/git-submodules\\\">Git Submodules</a> (Jan 02 &#39;19)</h2>\\n    <h2><a href=\\\"https://ducode.org/posts/windows-tools\\\">Windows Tools</a> (Jul 06 &#39;18)</h2>\\n    <h2><a href=\\\"https://ducode.org/posts\\\">More posts</a></h2>\\n\\n    <h1>&gt; projects</h1>\\n    <div>\\n        <h2><a href=\\\"https://httplaceholder.com\\\">HttPlaceholder</a> (active)</h2>\\n        <p>HTTP stub application for easily stubbing away any kind of HTTP call.</p>\\n    </div>\\n    <div>\\n        <h2><a href=\\\"https://armyknife.net\\\">Armyknife</a> (active)</h2>\\n        <p>Website with all kinds of handy (developer related) tools.</p>\\n    </div>\\n    <div>\\n        <h2><a href=\\\"https://budgetkar.nl\\\">Budgetkar</a> (active)</h2>\\n        <p>Netherlands based company where customers can rent trailers.</p>\\n    </div>\\n    <div>\\n        <h2><a href=\\\"https://github.com/dukeofharen/armyknife\\\">Armyknife console app</a> (inactive)</h2>\\n        <p>The old Armyknife, which came in a console app. Still works, but not actively developed.</p>\\n    </div>\\n    <div>\\n        <h2><a href=\\\"https://github.com/dukeofharen/iforgot\\\">IForgot</a> (inactive)</h2>\\n        <p>Simple console app for Windows which takes a screenshot every x seconds of all your screens. Still works, but\\n            not\\n            actively developed.</p>\\n    </div>\\n    <div>\\n        <h2><a href=\\\"https://github.com/dukeofharen/wolk\\\">Wolk</a> (inactive)</h2>\\n        <p>Self-hosted web application for taking notes, todo items etc. Still works, but not actively developed.</p>\\n    </div>\\n    <h1>&gt; get in touch</h1>\\n    <p>\\n        <a href=\\\"mailto:blog@ducode.org\\\">mail</a><br/>\\n        <a href=\\\"https://github.com/dukeofharen\\\">github</a><br/>\\n        <a href=\\\"https://twitter.com/ducodotnet\\\">twitter</a><br/>\\n        <a href=\\\"https://www.linkedin.com/in/ducowinterwerp/\\\">linkedin</a>\\n    </p>\\n</div>\\n</body>\\n</html>\\n\"\n          },\n          \"redirectURL\": \"\",\n          \"headersSize\": -1,\n          \"bodySize\": -1,\n          \"_transferSize\": 1438,\n          \"_error\": null\n        },\n        \"serverIPAddress\": \"136.144.216.39\",\n        \"startedDateTime\": \"2021-12-28T10:27:47.139Z\",\n        \"time\": 98.84800000031291,\n        \"timings\": {\n          \"blocked\": 2.4049999993901,\n          \"dns\": 20.937,\n          \"ssl\": 20.309999999999995,\n          \"connect\": 59.435,\n          \"send\": 0.11399999999999721,\n          \"wait\": 15.270999999698951,\n          \"receive\": 0.6860000012238743,\n          \"_blocked_queueing\": 0.9169999993901001,\n          \"_blocked_proxy\": 0.9500000000000001\n        }\n      },\n      {\n        \"_initiator\": {\n          \"type\": \"parser\",\n          \"url\": \"https://ducode.org/\",\n          \"lineNumber\": 6\n        },\n        \"_priority\": \"VeryHigh\",\n        \"_resourceType\": \"stylesheet\",\n        \"cache\": {},\n        \"connection\": \"1461\",\n        \"pageref\": \"page_2\",\n        \"request\": {\n          \"method\": \"GET\",\n          \"url\": \"https://ducode.org/static/style/style.css\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \":method\",\n              \"value\": \"GET\"\n            },\n            {\n              \"name\": \":authority\",\n              \"value\": \"ducode.org\"\n            },\n            {\n              \"name\": \":scheme\",\n              \"value\": \"https\"\n            },\n            {\n              \"name\": \":path\",\n              \"value\": \"/static/style/style.css\"\n            },\n            {\n              \"name\": \"pragma\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"cache-control\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"sec-ch-ua\",\n              \"value\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"96\\\"\"\n            },\n            {\n              \"name\": \"sec-ch-ua-mobile\",\n              \"value\": \"?0\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\"\n            },\n            {\n              \"name\": \"sec-ch-ua-platform\",\n              \"value\": \"\\\"Linux\\\"\"\n            },\n            {\n              \"name\": \"accept\",\n              \"value\": \"text/css,*/*;q=0.1\"\n            },\n            {\n              \"name\": \"sec-fetch-site\",\n              \"value\": \"same-origin\"\n            },\n            {\n              \"name\": \"sec-fetch-mode\",\n              \"value\": \"no-cors\"\n            },\n            {\n              \"name\": \"sec-fetch-dest\",\n              \"value\": \"style\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://ducode.org/\"\n            },\n            {\n              \"name\": \"accept-encoding\",\n              \"value\": \"gzip, deflate, br\"\n            },\n            {\n              \"name\": \"accept-language\",\n              \"value\": \"en-US,en;q=0.9\"\n            }\n          ],\n          \"queryString\": [],\n          \"cookies\": [],\n          \"headersSize\": -1,\n          \"bodySize\": 0\n        },\n        \"response\": {\n          \"status\": 200,\n          \"statusText\": \"\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \"server\",\n              \"value\": \"nginx\"\n            },\n            {\n              \"name\": \"date\",\n              \"value\": \"Tue, 28 Dec 2021 10:27:47 GMT\"\n            },\n            {\n              \"name\": \"content-type\",\n              \"value\": \"text/css\"\n            },\n            {\n              \"name\": \"content-length\",\n              \"value\": \"633\"\n            },\n            {\n              \"name\": \"last-modified\",\n              \"value\": \"Fri, 24 Dec 2021 08:58:28 GMT\"\n            },\n            {\n              \"name\": \"etag\",\n              \"value\": \"\\\"61c58bb4-279\\\"\"\n            },\n            {\n              \"name\": \"accept-ranges\",\n              \"value\": \"bytes\"\n            }\n          ],\n          \"cookies\": [],\n          \"content\": {\n            \"size\": 633,\n            \"mimeType\": \"text/css\",\n            \"text\": \"@font-face {\\n    font-family: \\\"Roboto Mono\\\";\\n    font-style: normal;\\n    font-weight: 400;\\n    font-display: swap;\\n    src: url(../fonts/roboto-mono.woff2) format(\\\"woff2\\\");\\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,\\n    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,\\n    U+FEFF, U+FFFD;\\n}\\n\\nbody {\\n    font-family: \\\"Roboto Mono\\\", monospace;\\n    color: #484848;\\n}\\n\\nimg {\\n    max-width: 100%;\\n}\\n\\n.portfolio {\\n    width: 600px;\\n    max-width: 100%;\\n}\\n\\na:link,\\na:active,\\na:hover,\\na:visited {\\n    text-decoration: none;\\n    color: #7d7d7d;\\n}\\n\\nh2 {\\n    font-size: 16px;\\n}\"\n          },\n          \"redirectURL\": \"\",\n          \"headersSize\": -1,\n          \"bodySize\": -1,\n          \"_transferSize\": 753,\n          \"_error\": null\n        },\n        \"serverIPAddress\": \"136.144.216.39\",\n        \"startedDateTime\": \"2021-12-28T10:27:47.225Z\",\n        \"time\": 13.840999999956694,\n        \"timings\": {\n          \"blocked\": 0.4830000000256114,\n          \"dns\": -1,\n          \"ssl\": -1,\n          \"connect\": -1,\n          \"send\": 0.09499999999999997,\n          \"wait\": 12.905000000607572,\n          \"receive\": 0.35799999932351056,\n          \"_blocked_queueing\": 0.21500000002561137,\n          \"_blocked_proxy\": 0.035\n        }\n      },\n      {\n        \"_initiator\": {\n          \"type\": \"parser\",\n          \"url\": \"https://ducode.org/static/style/style.css\"\n        },\n        \"_priority\": \"VeryHigh\",\n        \"_resourceType\": \"font\",\n        \"cache\": {},\n        \"connection\": \"1461\",\n        \"pageref\": \"page_2\",\n        \"request\": {\n          \"method\": \"GET\",\n          \"url\": \"https://ducode.org/static/fonts/roboto-mono.woff2\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \":method\",\n              \"value\": \"GET\"\n            },\n            {\n              \"name\": \":authority\",\n              \"value\": \"ducode.org\"\n            },\n            {\n              \"name\": \":scheme\",\n              \"value\": \"https\"\n            },\n            {\n              \"name\": \":path\",\n              \"value\": \"/static/fonts/roboto-mono.woff2\"\n            },\n            {\n              \"name\": \"pragma\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"cache-control\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"sec-ch-ua\",\n              \"value\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"96\\\"\"\n            },\n            {\n              \"name\": \"origin\",\n              \"value\": \"https://ducode.org\"\n            },\n            {\n              \"name\": \"sec-ch-ua-mobile\",\n              \"value\": \"?0\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\"\n            },\n            {\n              \"name\": \"sec-ch-ua-platform\",\n              \"value\": \"\\\"Linux\\\"\"\n            },\n            {\n              \"name\": \"accept\",\n              \"value\": \"*/*\"\n            },\n            {\n              \"name\": \"sec-fetch-site\",\n              \"value\": \"same-origin\"\n            },\n            {\n              \"name\": \"sec-fetch-mode\",\n              \"value\": \"cors\"\n            },\n            {\n              \"name\": \"sec-fetch-dest\",\n              \"value\": \"font\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://ducode.org/static/style/style.css\"\n            },\n            {\n              \"name\": \"accept-encoding\",\n              \"value\": \"gzip, deflate, br\"\n            },\n            {\n              \"name\": \"accept-language\",\n              \"value\": \"en-US,en;q=0.9\"\n            }\n          ],\n          \"queryString\": [],\n          \"cookies\": [],\n          \"headersSize\": -1,\n          \"bodySize\": 0\n        },\n        \"response\": {\n          \"status\": 200,\n          \"statusText\": \"\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \"server\",\n              \"value\": \"nginx\"\n            },\n            {\n              \"name\": \"date\",\n              \"value\": \"Tue, 28 Dec 2021 10:27:47 GMT\"\n            },\n            {\n              \"name\": \"content-type\",\n              \"value\": \"application/octet-stream\"\n            },\n            {\n              \"name\": \"content-length\",\n              \"value\": \"12312\"\n            },\n            {\n              \"name\": \"last-modified\",\n              \"value\": \"Fri, 24 Dec 2021 08:58:30 GMT\"\n            },\n            {\n              \"name\": \"etag\",\n              \"value\": \"\\\"61c58bb6-3018\\\"\"\n            },\n            {\n              \"name\": \"accept-ranges\",\n              \"value\": \"bytes\"\n            }\n          ],\n          \"cookies\": [],\n          \"content\": {\n            \"size\": 12312,\n            \"mimeType\": \"application/octet-stream\",\n            \"text\": \"\",\n            \"encoding\": \"base64\"\n          },\n          \"redirectURL\": \"\",\n          \"headersSize\": -1,\n          \"bodySize\": -1,\n          \"_transferSize\": 12453,\n          \"_error\": null\n        },\n        \"serverIPAddress\": \"136.144.216.39\",\n        \"startedDateTime\": \"2021-12-28T10:27:47.241Z\",\n        \"time\": 16.265000000203145,\n        \"timings\": {\n          \"blocked\": 0.6260000001268927,\n          \"dns\": -1,\n          \"ssl\": -1,\n          \"connect\": -1,\n          \"send\": 0.059,\n          \"wait\": 15.136999999262043,\n          \"receive\": 0.44300000081420876,\n          \"_blocked_queueing\": 0.3550000001268927,\n          \"_blocked_proxy\": 0.121\n        }\n      },\n      {\n        \"_initiator\": {\n          \"type\": \"other\"\n        },\n        \"_priority\": \"High\",\n        \"_resourceType\": \"other\",\n        \"cache\": {},\n        \"connection\": \"1461\",\n        \"pageref\": \"page_2\",\n        \"request\": {\n          \"method\": \"GET\",\n          \"url\": \"https://ducode.org/static/favicon.png\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \":method\",\n              \"value\": \"GET\"\n            },\n            {\n              \"name\": \":authority\",\n              \"value\": \"ducode.org\"\n            },\n            {\n              \"name\": \":scheme\",\n              \"value\": \"https\"\n            },\n            {\n              \"name\": \":path\",\n              \"value\": \"/static/favicon.png\"\n            },\n            {\n              \"name\": \"pragma\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"cache-control\",\n              \"value\": \"no-cache\"\n            },\n            {\n              \"name\": \"sec-ch-ua\",\n              \"value\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"96\\\"\"\n            },\n            {\n              \"name\": \"sec-ch-ua-mobile\",\n              \"value\": \"?0\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\"\n            },\n            {\n              \"name\": \"sec-ch-ua-platform\",\n              \"value\": \"\\\"Linux\\\"\"\n            },\n            {\n              \"name\": \"accept\",\n              \"value\": \"image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8\"\n            },\n            {\n              \"name\": \"sec-fetch-site\",\n              \"value\": \"same-origin\"\n            },\n            {\n              \"name\": \"sec-fetch-mode\",\n              \"value\": \"no-cors\"\n            },\n            {\n              \"name\": \"sec-fetch-dest\",\n              \"value\": \"image\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://ducode.org/\"\n            },\n            {\n              \"name\": \"accept-encoding\",\n              \"value\": \"gzip, deflate, br\"\n            },\n            {\n              \"name\": \"accept-language\",\n              \"value\": \"en-US,en;q=0.9\"\n            }\n          ],\n          \"queryString\": [],\n          \"cookies\": [],\n          \"headersSize\": -1,\n          \"bodySize\": 0\n        },\n        \"response\": {\n          \"status\": 200,\n          \"statusText\": \"\",\n          \"httpVersion\": \"http/2.0\",\n          \"headers\": [\n            {\n              \"name\": \"server\",\n              \"value\": \"nginx\"\n            },\n            {\n              \"name\": \"date\",\n              \"value\": \"Tue, 28 Dec 2021 10:27:47 GMT\"\n            },\n            {\n              \"name\": \"content-type\",\n              \"value\": \"image/png\"\n            },\n            {\n              \"name\": \"content-length\",\n              \"value\": \"114802\"\n            },\n            {\n              \"name\": \"last-modified\",\n              \"value\": \"Fri, 24 Dec 2021 08:58:30 GMT\"\n            },\n            {\n              \"name\": \"etag\",\n              \"value\": \"\\\"61c58bb6-1c072\\\"\"\n            },\n            {\n              \"name\": \"accept-ranges\",\n              \"value\": \"bytes\"\n            }\n          ],\n          \"cookies\": [],\n          \"content\": {\n            \"size\": 114802,\n            \"mimeType\": \"image/png\",\n            \"text\": \"\",\n            \"encoding\": \"base64\"\n          },\n          \"redirectURL\": \"\",\n          \"headersSize\": -1,\n          \"bodySize\": -1,\n          \"_transferSize\": 115053,\n          \"_error\": null\n        },\n        \"serverIPAddress\": \"136.144.216.39\",\n        \"startedDateTime\": \"2021-12-28T10:27:47.263Z\",\n        \"time\": 50.2649999998539,\n        \"timings\": {\n          \"blocked\": 0.5909999997781124,\n          \"dns\": -1,\n          \"ssl\": -1,\n          \"connect\": -1,\n          \"send\": 0.09699999999999998,\n          \"wait\": 15.949999999369611,\n          \"receive\": 33.627000000706175,\n          \"_blocked_queueing\": 0.2679999997781124,\n          \"_blocked_proxy\": 0.05200000000000002\n        }\n      },\n      {\n        \"pageref\": \"page_1\",\n        \"startedDateTime\": \"2021-12-28T22:12:42.406+01:00\",\n        \"request\": {\n          \"bodySize\": 270,\n          \"method\": \"PUT\",\n          \"url\": \"https://api.site.com/api/v1/admin/users/123\",\n          \"httpVersion\": \"HTTP/2\",\n          \"headers\": [\n            {\n              \"name\": \"Host\",\n              \"value\": \"api.site.com\"\n            },\n            {\n              \"name\": \"User-Agent\",\n              \"value\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:95.0) Gecko/20100101 Firefox/95.0\"\n            },\n            {\n              \"name\": \"Accept\",\n              \"value\": \"application/json, text/plain, */*\"\n            },\n            {\n              \"name\": \"Accept-Language\",\n              \"value\": \"en-US,en;q=0.5\"\n            },\n            {\n              \"name\": \"Accept-Encoding\",\n              \"value\": \"gzip, deflate, br\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json;charset=utf-8\"\n            },\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"Bearer bearer\"\n            },\n            {\n              \"name\": \"Content-Length\",\n              \"value\": \"270\"\n            },\n            {\n              \"name\": \"Origin\",\n              \"value\": \"https://site.com\"\n            },\n            {\n              \"name\": \"Connection\",\n              \"value\": \"keep-alive\"\n            },\n            {\n              \"name\": \"Sec-Fetch-Dest\",\n              \"value\": \"empty\"\n            },\n            {\n              \"name\": \"Sec-Fetch-Mode\",\n              \"value\": \"cors\"\n            },\n            {\n              \"name\": \"Sec-Fetch-Site\",\n              \"value\": \"same-site\"\n            },\n            {\n              \"name\": \"DNT\",\n              \"value\": \"1\"\n            },\n            {\n              \"name\": \"Sec-GPC\",\n              \"value\": \"1\"\n            },\n            {\n              \"name\": \"TE\",\n              \"value\": \"trailers\"\n            }\n          ],\n          \"cookies\": [],\n          \"queryString\": [],\n          \"headersSize\": 885,\n          \"postData\": {\n            \"mimeType\": \"application/json;charset=utf-8\",\n            \"params\": [],\n            \"text\": \"{\\\"firstName\\\":\\\"Dukeofharen\\\"}\"\n          }\n        },\n        \"response\": {\n          \"status\": 204,\n          \"statusText\": \"No Content\",\n          \"httpVersion\": \"HTTP/2\",\n          \"headers\": [\n            {\n              \"name\": \"server\",\n              \"value\": \"nginx\"\n            },\n            {\n              \"name\": \"date\",\n              \"value\": \"Tue, 28 Dec 2021 21:12:42 GMT\"\n            },\n            {\n              \"name\": \"access-control-allow-headers\",\n              \"value\": \"X-Api-Key, X-App-Version, Content-Type, Authorization, Location, x-driverslicense-secret\"\n            },\n            {\n              \"name\": \"access-control-allow-methods\",\n              \"value\": \"GET, POST, PUT, DELETE, OPTIONS, PATCH\"\n            },\n            {\n              \"name\": \"access-control-allow-origin\",\n              \"value\": \"*\"\n            },\n            {\n              \"name\": \"access-control-expose-headers\",\n              \"value\": \"Token, Location\"\n            },\n            {\n              \"name\": \"referrer-policy\",\n              \"value\": \"no-referrer\"\n            },\n            {\n              \"name\": \"strict-transport-security\",\n              \"value\": \"max-age=31536000; includeSubDomains\"\n            },\n            {\n              \"name\": \"x-content-type-options\",\n              \"value\": \"nosniff\"\n            },\n            {\n              \"name\": \"x-frame-options\",\n              \"value\": \"SAMEORIGIN\"\n            },\n            {\n              \"name\": \"X-Firefox-Spdy\",\n              \"value\": \"h2\"\n            }\n          ],\n          \"cookies\": [],\n          \"content\": {\n            \"mimeType\": \"text/xml\",\n            \"size\": 0,\n            \"text\": \"\"\n          },\n          \"redirectURL\": \"\",\n          \"headersSize\": 523,\n          \"bodySize\": 1678\n        },\n        \"cache\": {},\n        \"timings\": {\n          \"blocked\": -1,\n          \"dns\": 0,\n          \"connect\": 0,\n          \"ssl\": 0,\n          \"send\": 0,\n          \"wait\": 65,\n          \"receive\": 0\n        },\n        \"time\": 65,\n        \"_securityState\": \"secure\",\n        \"serverIPAddress\": \"136.144.216.39\",\n        \"connection\": \"443\"\n      }\n    ]\n  }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/import/har?tenant=tenant1",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"import",
												"har"
											],
											"query": [
												{
													"key": "tenant",
													"value": "tenant1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "8. Stub generation based on OpenAPI definition",
							"item": [
								{
									"name": "Remove old stubs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{rootUrl}}ph-api/stubs",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"stubs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import OpenAPI (pet store)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of stubs created\", function() {",
													"    pm.expect(jsonData.length).to.eql(6);",
													"});",
													"",
													"pm.test(\"Check first stub\", function () {",
													"    const stub = jsonData[0].stub;",
													"    pm.expect(stub.id).to.contain(\"generated-\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"GET\");",
													"    pm.expect(stub.conditions.url.path).to.eql(\"/v1/pets\");",
													"    pm.expect(!!stub.conditions.url.query.limit).to.eql(true);",
													"    pm.expect(!!stub.conditions.headers[\"X-Api-Key\"]).to.eql(true);",
													"    pm.expect(stub.conditions.host).to.eql(\"petstore.swagger.io\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(200);",
													"    pm.expect(stub.response.contentType).to.eql(\"application/json\");",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(1);",
													"    pm.expect(!!stub.response.headers[\"x-next\"]).to.eql(true);",
													"",
													"    const responseJson = JSON.parse(stub.response.json);",
													"    pm.expect(responseJson[0].id).to.eql(1);",
													"    pm.expect(responseJson[0].name).to.eql(\"Cat\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: X-Api-Key\n          in: header\n          description: API key.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n              example:\n                - id: 1\n                  name: Cat\n                - id: 2\n                  name: Dog\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n        petType:\n          type: string\n          enum: [cat, dog, rabbit]\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/import/openapi",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"import",
												"openapi"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import OpenAPI (HttPlaceholder)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of stubs created\", function() {",
													"    pm.expect(jsonData.length).to.eql(73);",
													"});",
													"",
													"pm.test(\"Check 21st stub\", function () {",
													"    const stub = jsonData[20].stub;",
													"    pm.expect(stub.id).to.contain(\"generated-\");",
													"    pm.expect(stub.description).to.eql(\"An endpoint which accepts the correlation ID of a request made earlier.\\nHttPlaceholder will create a stub based on this request for you to tweak later on.\");",
													"",
													"    // Request",
													"    pm.expect(stub.conditions.method).to.eql(\"POST\");",
													"    pm.expect(stub.conditions.url.path).to.match(/^\\/requests\\/(.*)\\/stubs$/);",
													"    pm.expect(stub.conditions.headers[\"content-type\"]).to.eql(\"application/json\");",
													"    pm.expect(stub.conditions.host).to.eql(\"localhost\");",
													"",
													"    // Response",
													"    pm.expect(stub.response.statusCode).to.eql(200);",
													"    pm.expect(stub.response.contentType).to.eql(\"application/json\");",
													"    pm.expect(Object.keys(stub.response.headers).length).to.eql(0);",
													"",
													"    const responseJson = JSON.parse(stub.response.json);",
													"    pm.expect(!!responseJson.stub).to.eql(true);",
													"    pm.expect(!!responseJson.stub.id).to.eql(true);",
													"    pm.expect(!!responseJson.stub.conditions).to.eql(true);",
													"    pm.expect(!!responseJson.stub.response).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"x-generator\": \"NSwag v13.15.3.0 (NJsonSchema v10.6.4.0 (Newtonsoft.Json v13.0.0.0))\",\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"HttPlaceholder API\",\n        \"version\": \"1.0.0\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"http://localhost\"\n        }\n    ],\n    \"paths\": {\n        \"/import/curl\": {\n            \"post\": {\n                \"tags\": [\n                    \"Import\"\n                ],\n                \"summary\": \"An endpoint that is used for creating a stub (or multiple stubs) based on cURL command(s).\",\n                \"operationId\": \"Import_CreateCurlStubs\",\n                \"parameters\": [\n                    {\n                        \"name\": \"doNotCreateStub\",\n                        \"in\": \"query\",\n                        \"description\": \"Whether to add the stub to the data source. If set to false, the stub is only returned but not added.\",\n                        \"schema\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"x-position\": 2\n                    }\n                ],\n                \"requestBody\": {\n                    \"x-name\": \"input\",\n                    \"description\": \"The data which should be added.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 1\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"OK, with the generated stubs.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FullStubDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/import/har\": {\n            \"post\": {\n                \"tags\": [\n                    \"Import\"\n                ],\n                \"summary\": \"An endpoint that is used for creating stubs based on a HAR file (HTTP Archive)\",\n                \"operationId\": \"Import_CreateHarStubs\",\n                \"parameters\": [\n                    {\n                        \"name\": \"doNotCreateStub\",\n                        \"in\": \"query\",\n                        \"description\": \"Whether to add the stub to the data source. If set to false, the stub is only returned but not added.\",\n                        \"schema\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"x-position\": 2\n                    }\n                ],\n                \"requestBody\": {\n                    \"x-name\": \"input\",\n                    \"description\": \"The raw HAR JSON input.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 1\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"OK, with the generated stubs.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FullStubDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/metadata\": {\n            \"get\": {\n                \"tags\": [\n                    \"Metadata\"\n                ],\n                \"summary\": \"Gets metadata about the API (like the assembly version).\",\n                \"operationId\": \"Metadata_Get\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"HttPlaceholder metadata.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/MetadataDto\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/metadata/features/{featureFlag}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Metadata\"\n                ],\n                \"summary\": \"Checks whether a specific feature is enabled or not.\",\n                \"operationId\": \"Metadata_CheckFeature\",\n                \"parameters\": [\n                    {\n                        \"name\": \"featureFlag\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The feature flag to test.\",\n                        \"schema\": {\n                            \"$ref\": \"#/components/schemas/FeatureFlagType\"\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"A model containing whether the feature flag is enabled or not.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/FeatureResultDto\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/requests\": {\n            \"get\": {\n                \"tags\": [\n                    \"Request\"\n                ],\n                \"summary\": \"Get all Requests.\",\n                \"operationId\": \"Request_GetAll\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"All request results\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/RequestResultDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Request\"\n                ],\n                \"summary\": \"Delete all requests. This call flushes all the requests.\",\n                \"operationId\": \"Request_DeleteAll\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but no content returned\"\n                    }\n                }\n            }\n        },\n        \"/requests/overview\": {\n            \"get\": {\n                \"tags\": [\n                    \"Request\"\n                ],\n                \"summary\": \"Get overview of all Requests.\",\n                \"operationId\": \"Request_GetOverview\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"All request results\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/RequestOverviewDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/requests/{correlationId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Request\"\n                ],\n                \"summary\": \"Gets a specific request by correlation ID.\",\n                \"operationId\": \"Request_GetRequest\",\n                \"parameters\": [\n                    {\n                        \"name\": \"correlationId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The original correlation ID.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"The request.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/RequestResultDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Request\"\n                ],\n                \"summary\": \"Delete a specific request.\",\n                \"operationId\": \"Request_DeleteRequest\",\n                \"parameters\": [\n                    {\n                        \"name\": \"correlationId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The ID of the request to delete.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but no content returned\"\n                    }\n                }\n            }\n        },\n        \"/requests/{correlationId}/stubs\": {\n            \"post\": {\n                \"tags\": [\n                    \"Request\"\n                ],\n                \"summary\": \"An endpoint which accepts the correlation ID of a request made earlier.\\nHttPlaceholder will create a stub based on this request for you to tweak later on.\",\n                \"operationId\": \"Request_CreateStubForRequest\",\n                \"parameters\": [\n                    {\n                        \"name\": \"correlationId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"requestBody\": {\n                    \"x-name\": \"input\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/CreateStubForRequestInputDto\"\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 2\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"OK, with the generated stub\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/FullStubDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/scenarios\": {\n            \"get\": {\n                \"tags\": [\n                    \"Scenario\"\n                ],\n                \"summary\": \"Gets all scenarios.\",\n                \"operationId\": \"Scenario_GetAllScenarioStates\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"OK, with all scenarios.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/ScenarioStateDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Scenario\"\n                ],\n                \"summary\": \"Deletes all scenarios.\",\n                \"operationId\": \"Scenario_DeleteAllScenarios\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"No content.\"\n                    }\n                }\n            }\n        },\n        \"/scenarios/{scenario}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Scenario\"\n                ],\n                \"summary\": \"Gets a specific scenario.\",\n                \"operationId\": \"Scenario_GetScenario\",\n                \"parameters\": [\n                    {\n                        \"name\": \"scenario\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The scenario name.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"The ScenarioStateDto.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ScenarioStateDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Scenario\"\n                ],\n                \"summary\": \"Sets the scenario state to a new value.\",\n                \"operationId\": \"Scenario_SetScenario\",\n                \"parameters\": [\n                    {\n                        \"name\": \"scenario\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The scenario name.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 2\n                    }\n                ],\n                \"requestBody\": {\n                    \"x-name\": \"scenarioState\",\n                    \"description\": \"The new scenario state.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/ScenarioStateInputDto\"\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 1\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"No content.\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Scenario\"\n                ],\n                \"summary\": \"Deletes / clears a scenario.\",\n                \"operationId\": \"Scenario_DeleteScenario\",\n                \"parameters\": [\n                    {\n                        \"name\": \"scenario\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The scenario name.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"No content.\"\n                    },\n                    \"404\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/stubs\": {\n            \"post\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Adds a new stub.\",\n                \"operationId\": \"Stub_Add\",\n                \"requestBody\": {\n                    \"x-name\": \"stub\",\n                    \"description\": \"The posted stub\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/StubDto\"\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 1\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"OK, with the created stub\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/FullStubDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"409\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"get\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Get all stubs.\",\n                \"operationId\": \"Stub_GetAll\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"All stubs.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FullStubDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Delete ALL stubs. Be careful.\",\n                \"operationId\": \"Stub_DeleteAll\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but not content\"\n                    }\n                }\n            }\n        },\n        \"/stubs/multiple\": {\n            \"post\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Adds multiple new stubs.\",\n                \"operationId\": \"Stub_AddMultiple\",\n                \"requestBody\": {\n                    \"x-name\": \"stubs\",\n                    \"description\": \"The posted stubs.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/StubDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 1\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"OK, with the created stubs\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FullStubDto\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/stubs/{stubId}\": {\n            \"put\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Updates a given stub.\",\n                \"operationId\": \"Stub_Update\",\n                \"parameters\": [\n                    {\n                        \"name\": \"stubId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The stub ID.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 2\n                    }\n                ],\n                \"requestBody\": {\n                    \"x-name\": \"stub\",\n                    \"description\": \"The posted stub.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/StubDto\"\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 1\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but no content returned\"\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"409\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"get\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Get a specific stub by stub identifier.\",\n                \"operationId\": \"Stub_Get\",\n                \"parameters\": [\n                    {\n                        \"name\": \"stubId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"The stub.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/FullStubDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Delete a specific stub by stub identifier.\",\n                \"operationId\": \"Stub_Delete\",\n                \"parameters\": [\n                    {\n                        \"name\": \"stubId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but not content\"\n                    },\n                    \"404\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/stubs/overview\": {\n            \"get\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Get stub overview.\",\n                \"operationId\": \"Stub_GetOverview\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"All stubs.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FullStubOverviewDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/stubs/{stubId}/requests\": {\n            \"get\": {\n                \"tags\": [\n                    \"Stub\"\n                ],\n                \"summary\": \"Get requests for the given stub ID.\",\n                \"operationId\": \"Stub_GetRequestsByStubId\",\n                \"parameters\": [\n                    {\n                        \"name\": \"stubId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"request results for the given stubId\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/RequestResultDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/tenants\": {\n            \"get\": {\n                \"tags\": [\n                    \"Tenant\"\n                ],\n                \"summary\": \"Gets all available tenant names.\",\n                \"operationId\": \"Tenant_GetTenantNames\",\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"All available tenant names.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/tenants/{tenant}/stubs\": {\n            \"get\": {\n                \"tags\": [\n                    \"Tenant\"\n                ],\n                \"summary\": \"Gets all stubs in a specific tenant.\",\n                \"operationId\": \"Tenant_GetAll\",\n                \"parameters\": [\n                    {\n                        \"name\": \"tenant\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"All stubs in the tenant.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FullStubDto\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Tenant\"\n                ],\n                \"summary\": \"Deletes all stubs in a specific tenant.\",\n                \"operationId\": \"Tenant_DeleteAll\",\n                \"parameters\": [\n                    {\n                        \"name\": \"tenant\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but no content\"\n                    },\n                    \"default\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Tenant\"\n                ],\n                \"summary\": \"Updates the stubs in a specific tenant with the posted values.\\nIf a stub that is currently available in a tenant isn't sent in the request,\\nit will be deleted.\",\n                \"operationId\": \"Tenant_UpdateAll\",\n                \"parameters\": [\n                    {\n                        \"name\": \"tenant\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"requestBody\": {\n                    \"x-name\": \"stubs\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/StubDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"required\": true,\n                    \"x-position\": 2\n                },\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"204\": {\n                        \"description\": \"OK, but no content\"\n                    },\n                    \"default\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/users/{username}\": {\n            \"get\": {\n                \"tags\": [\n                    \"User\"\n                ],\n                \"summary\": \"Get the user for the given username.\",\n                \"operationId\": \"User_Get\",\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"nullable\": true\n                        },\n                        \"x-position\": 1\n                    }\n                ],\n                \"responses\": {\n                    \"401\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    },\n                    \"200\": {\n                        \"description\": \"The User.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/UserDto\"\n                                }\n                            }\n                        }\n                    },\n                    \"403\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ProblemDetails\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"ProblemDetails\": {\n                \"type\": \"object\",\n                \"additionalProperties\": {\n                    \"nullable\": true\n                },\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"nullable\": true\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"nullable\": true\n                    },\n                    \"status\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int32\",\n                        \"nullable\": true\n                    },\n                    \"detail\": {\n                        \"type\": \"string\",\n                        \"nullable\": true\n                    },\n                    \"instance\": {\n                        \"type\": \"string\",\n                        \"nullable\": true\n                    },\n                    \"extensions\": {\n                        \"type\": \"object\",\n                        \"additionalProperties\": {}\n                    }\n                }\n            },\n            \"FullStubDto\": {\n                \"type\": \"object\",\n                \"description\": \"A class for storing a stub with its metadata.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"stub\": {\n                        \"description\": \"Gets or sets the stub.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubDto\"\n                            }\n                        ]\n                    },\n                    \"metadata\": {\n                        \"description\": \"Gets or sets the metadata.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubMetadataDto\"\n                            }\n                        ]\n                    }\n                }\n            },\n            \"StubDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing all information about a stub.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the identifier.\",\n                        \"nullable\": true\n                    },\n                    \"conditions\": {\n                        \"description\": \"Gets or sets the conditions.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubConditionsDto\"\n                            }\n                        ]\n                    },\n                    \"response\": {\n                        \"description\": \"Gets or sets the response.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubResponseDto\"\n                            }\n                        ]\n                    },\n                    \"priority\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the priority.\",\n                        \"format\": \"int32\"\n                    },\n                    \"tenant\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the tenant.\",\n                        \"nullable\": true\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the description.\",\n                        \"nullable\": true\n                    },\n                    \"enabled\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether this stub is enabled or not.\"\n                    },\n                    \"scenario\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the scenario the stub is executed under.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubConditionsDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing all conditions for a stub.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"method\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the method.\",\n                        \"nullable\": true\n                    },\n                    \"url\": {\n                        \"description\": \"Gets or sets the URL.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubUrlConditionDto\"\n                            }\n                        ]\n                    },\n                    \"body\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the body.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"form\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the form.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/StubFormDto\"\n                        }\n                    },\n                    \"headers\": {\n                        \"type\": \"object\",\n                        \"description\": \"Gets or sets the headers.\",\n                        \"nullable\": true,\n                        \"additionalProperties\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"xpath\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the xpath.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/StubXpathDto\"\n                        }\n                    },\n                    \"jsonPath\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the json path.\",\n                        \"nullable\": true,\n                        \"items\": {}\n                    },\n                    \"basicAuthentication\": {\n                        \"description\": \"Gets or sets the basic authentication.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubBasicAuthenticationDto\"\n                            }\n                        ]\n                    },\n                    \"clientIp\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the client ip.\",\n                        \"nullable\": true\n                    },\n                    \"host\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the host.\",\n                        \"nullable\": true\n                    },\n                    \"json\": {\n                        \"description\": \"Gets or sets the JSON condition model.\",\n                        \"nullable\": true\n                    },\n                    \"scenario\": {\n                        \"description\": \"Gets or sets the scenario conditions model.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubConditionScenarioDto\"\n                            }\n                        ]\n                    }\n                }\n            },\n            \"StubUrlConditionDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing information about the URL condition checkers.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"path\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the path.\",\n                        \"nullable\": true\n                    },\n                    \"query\": {\n                        \"type\": \"object\",\n                        \"description\": \"Gets or sets the query.\",\n                        \"nullable\": true,\n                        \"additionalProperties\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"fullPath\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the full path.\",\n                        \"nullable\": true\n                    },\n                    \"isHttps\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets the is HTTPS.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubFormDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing data for the form condition checker.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"key\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the key.\",\n                        \"nullable\": true\n                    },\n                    \"value\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the value.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubXpathDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing information about the XPath condition checker.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"queryString\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the query string.\",\n                        \"nullable\": true\n                    },\n                    \"namespaces\": {\n                        \"type\": \"object\",\n                        \"description\": \"Gets or sets the namespaces.\",\n                        \"nullable\": true,\n                        \"additionalProperties\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"StubBasicAuthenticationDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing stub information for the basic authentication condition checker.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the username.\",\n                        \"nullable\": true\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the password.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubConditionScenarioDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing all scenario conditions for a stub\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"minHits\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the inclusive min hit count.\",\n                        \"format\": \"int32\",\n                        \"nullable\": true\n                    },\n                    \"maxHits\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the exclusive max hit count.\",\n                        \"format\": \"int32\",\n                        \"nullable\": true\n                    },\n                    \"exactHits\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the exact hits count.\",\n                        \"format\": \"int32\",\n                        \"nullable\": true\n                    },\n                    \"scenarioState\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the state the scenario should be in.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubResponseDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing all possible response parameters for a stub.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"enableDynamicMode\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether dynamic mode is on.\",\n                        \"nullable\": true\n                    },\n                    \"statusCode\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the status code.\",\n                        \"format\": \"int32\",\n                        \"nullable\": true\n                    },\n                    \"contentType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the response content type.\",\n                        \"nullable\": true\n                    },\n                    \"text\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the text.\",\n                        \"nullable\": true\n                    },\n                    \"base64\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the base64.\",\n                        \"nullable\": true\n                    },\n                    \"file\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the file.\",\n                        \"nullable\": true\n                    },\n                    \"headers\": {\n                        \"type\": \"object\",\n                        \"description\": \"Gets or sets the headers.\",\n                        \"nullable\": true,\n                        \"additionalProperties\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"extraDuration\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the duration of the extra.\",\n                        \"format\": \"int32\",\n                        \"nullable\": true\n                    },\n                    \"json\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the json.\",\n                        \"nullable\": true\n                    },\n                    \"xml\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the XML.\",\n                        \"nullable\": true\n                    },\n                    \"html\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the HTML.\",\n                        \"nullable\": true\n                    },\n                    \"temporaryRedirect\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the temporary redirect.\",\n                        \"nullable\": true\n                    },\n                    \"permanentRedirect\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the permanent redirect.\",\n                        \"nullable\": true\n                    },\n                    \"reverseProxy\": {\n                        \"description\": \"Gets or sets the reverse proxy settings.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubResponseReverseProxyDto\"\n                            }\n                        ]\n                    },\n                    \"lineEndings\": {\n                        \"description\": \"Gets or sets the line endings type.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/LineEndingType\"\n                            }\n                        ]\n                    },\n                    \"image\": {\n                        \"description\": \"Gets or sets the stub image.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubResponseImageDto\"\n                            }\n                        ]\n                    },\n                    \"scenario\": {\n                        \"description\": \"Gets or sets the response scenario variables.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubResponseScenarioDto\"\n                            }\n                        ]\n                    }\n                }\n            },\n            \"StubResponseReverseProxyDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing reverse proxy settings.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the URL where the request should be sent to. The request will be sent to exactly this URL.\",\n                        \"nullable\": true\n                    },\n                    \"appendQueryString\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether the query string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL.\",\n                        \"nullable\": true\n                    },\n                    \"appendPath\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether the path string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL.\",\n                        \"nullable\": true\n                    },\n                    \"replaceRootUrl\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether the root URL of the response of the target web service should be replaced with the root URL of HttPlaceholder.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"LineEndingType\": {\n                \"type\": \"integer\",\n                \"description\": \"\",\n                \"x-enumNames\": [\n                    \"NotSet\",\n                    \"Windows\",\n                    \"Unix\"\n                ],\n                \"enum\": [\n                    0,\n                    1,\n                    2\n                ]\n            },\n            \"StubResponseImageDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing settings about the stub image that should be generated.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"type\": {\n                        \"description\": \"Gets or sets the image type. Possibilities: jpeg, png, bmp and gif.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/ResponseImageType\"\n                            }\n                        ]\n                    },\n                    \"width\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the image width in pixels.\",\n                        \"format\": \"int32\"\n                    },\n                    \"height\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the image height in pixels.\",\n                        \"format\": \"int32\"\n                    },\n                    \"backgroundColor\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the background color in HEX.\",\n                        \"nullable\": true\n                    },\n                    \"text\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the text that should be drawn in the image.\",\n                        \"nullable\": true\n                    },\n                    \"fontSize\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the fontsize for the text in the image.\",\n                        \"format\": \"int32\"\n                    },\n                    \"fontColor\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the font color.\",\n                        \"nullable\": true\n                    },\n                    \"jpegQuality\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the image quality in the case of JPEG image.\",\n                        \"format\": \"int32\"\n                    },\n                    \"wordWrap\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether the text should be wrapped across the image or not.\"\n                    }\n                }\n            },\n            \"ResponseImageType\": {\n                \"type\": \"integer\",\n                \"description\": \"\",\n                \"x-enumNames\": [\n                    \"NotSet\",\n                    \"Jpeg\",\n                    \"Bmp\",\n                    \"Png\",\n                    \"Gif\"\n                ],\n                \"enum\": [\n                    0,\n                    1,\n                    2,\n                    3,\n                    4\n                ]\n            },\n            \"StubResponseScenarioDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing all scenario conditions for a stub response.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"setScenarioState\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the scenario state the scenario should be set to after the stub is hit.\",\n                        \"nullable\": true\n                    },\n                    \"clearState\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets a value which indicates if the state (scenario state and hit count) should be reset after the stub is hit.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubMetadataDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing metadata of a stub.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"readOnly\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets a value indicating whether [read only].\"\n                    }\n                }\n            },\n            \"MetadataDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing the HttPlaceholder metadata.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"version\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the version.\",\n                        \"nullable\": true\n                    },\n                    \"variableHandlers\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the available variable handlers.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/VariableHandlerDto\"\n                        }\n                    }\n                }\n            },\n            \"VariableHandlerDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model that is used for displaying what types of variable handlers are available.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the name of the variable handler.\",\n                        \"nullable\": true\n                    },\n                    \"fullName\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the full name of the variable handler.\",\n                        \"nullable\": true\n                    },\n                    \"example\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets a short instruction on how to use the variable handler.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"FeatureResultDto\": {\n                \"type\": \"object\",\n                \"description\": \"A class for storing whether a specific feature is enabled or not.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"featureFlag\": {\n                        \"description\": \"Gets or sets the checked feature.\",\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/FeatureFlagType\"\n                            }\n                        ]\n                    },\n                    \"enabled\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether the feature is enabled or not.\"\n                    }\n                }\n            },\n            \"FeatureFlagType\": {\n                \"type\": \"integer\",\n                \"description\": \"\",\n                \"x-enumNames\": [\n                    \"Authentication\"\n                ],\n                \"enum\": [\n                    0\n                ]\n            },\n            \"RequestResultDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing a request.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"correlationId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the correlation identifier.\",\n                        \"nullable\": true\n                    },\n                    \"requestParameters\": {\n                        \"description\": \"Gets or sets the request parameters.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/RequestParametersDto\"\n                            }\n                        ]\n                    },\n                    \"stubExecutionResults\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the stub execution results.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/StubExecutionResultDto\"\n                        }\n                    },\n                    \"stubResponseWriterResults\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the stub response writer results.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/StubResponseWriterResultDto\"\n                        }\n                    },\n                    \"executingStubId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the executing stub identifier.\",\n                        \"nullable\": true\n                    },\n                    \"stubTenant\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the tenant name of the stub.\",\n                        \"nullable\": true\n                    },\n                    \"requestBeginTime\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the request begin time.\",\n                        \"format\": \"date-time\"\n                    },\n                    \"requestEndTime\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the request end time.\",\n                        \"format\": \"date-time\"\n                    }\n                }\n            },\n            \"RequestParametersDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing the request data for a request.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"method\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the method.\",\n                        \"nullable\": true\n                    },\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the URL.\",\n                        \"nullable\": true\n                    },\n                    \"body\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the body.\",\n                        \"nullable\": true\n                    },\n                    \"headers\": {\n                        \"type\": \"object\",\n                        \"description\": \"Gets or sets the headers.\",\n                        \"nullable\": true,\n                        \"additionalProperties\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"clientIp\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the client ip.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubExecutionResultDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing all execution related data for a given stub.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"stubId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the stub identifier.\",\n                        \"nullable\": true\n                    },\n                    \"passed\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets a value indicating whether this StubExecutionResultDto is passed.\"\n                    },\n                    \"conditions\": {\n                        \"type\": \"array\",\n                        \"description\": \"Gets or sets the conditions.\",\n                        \"nullable\": true,\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ConditionCheckResultDto\"\n                        }\n                    }\n                }\n            },\n            \"ConditionCheckResultDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing a condition check result.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"checkerName\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the name of the checker.\",\n                        \"nullable\": true\n                    },\n                    \"conditionValidation\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the condition validation.\",\n                        \"nullable\": true\n                    },\n                    \"log\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the log.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"StubResponseWriterResultDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing the execution result of a specific response writer.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"responseWriterName\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the name of the response writer.\",\n                        \"nullable\": true\n                    },\n                    \"executed\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets a value indicating whether this StubResponseWriterResultDto is executed.\"\n                    },\n                    \"log\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the log string of the executed response writer.\",\n                        \"nullable\": true\n                    }\n                }\n            },\n            \"RequestOverviewDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing the base properties of a request.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"correlationId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the correlation identifier.\",\n                        \"nullable\": true\n                    },\n                    \"method\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the method.\",\n                        \"nullable\": true\n                    },\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the URL.\",\n                        \"nullable\": true\n                    },\n                    \"executingStubId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the executing stub identifier.\",\n                        \"nullable\": true\n                    },\n                    \"stubTenant\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the tenant name of the stub.\",\n                        \"nullable\": true\n                    },\n                    \"requestBeginTime\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the request begin time.\",\n                        \"format\": \"date-time\"\n                    },\n                    \"requestEndTime\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the request end time.\",\n                        \"format\": \"date-time\"\n                    }\n                }\n            },\n            \"CreateStubForRequestInputDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model which contains metadata which is used when creating a stub from a request.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"doNotCreateStub\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether to add the stub to the data source. If set to false, the stub is only returned but not added.\"\n                    }\n                }\n            },\n            \"ScenarioStateDto\": {\n                \"type\": \"object\",\n                \"description\": \"Represents the state of a specific scenario.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"scenario\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the scenario name.\",\n                        \"nullable\": true\n                    },\n                    \"state\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the state the scenario is in.\",\n                        \"nullable\": true\n                    },\n                    \"hitCount\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the number of times the scenario has been hit.\",\n                        \"format\": \"int32\"\n                    }\n                }\n            },\n            \"ScenarioStateInputDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model that is used to set the scenario.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"state\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the state the scenario is in.\",\n                        \"nullable\": true\n                    },\n                    \"hitCount\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Gets or sets the number of times the scenario has been hit.\",\n                        \"format\": \"int32\"\n                    }\n                }\n            },\n            \"FullStubOverviewDto\": {\n                \"type\": \"object\",\n                \"description\": \"A class for storing a stripped down version of a stub with metadata.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"stub\": {\n                        \"description\": \"Gets or sets the stub.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubOverviewDto\"\n                            }\n                        ]\n                    },\n                    \"metadata\": {\n                        \"description\": \"Gets or sets the metadata.\",\n                        \"nullable\": true,\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StubMetadataDto\"\n                            }\n                        ]\n                    }\n                }\n            },\n            \"StubOverviewDto\": {\n                \"type\": \"object\",\n                \"description\": \"A class for storing a stripped down version of a stub.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the identifier.\",\n                        \"nullable\": true\n                    },\n                    \"tenant\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the tenant.\",\n                        \"nullable\": true\n                    },\n                    \"enabled\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Gets or sets whether the stub is enabled or not.\"\n                    }\n                }\n            },\n            \"UserDto\": {\n                \"type\": \"object\",\n                \"description\": \"A model for storing information about a user.\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"description\": \"Gets or sets the username.\",\n                        \"nullable\": true\n                    }\n                }\n            }\n        }\n    }\n}\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/import/openapi",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"import",
												"openapi"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "9. Scheduled jobs",
							"item": [
								{
									"name": "Run \"clean old requests\" job",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Everything went OK\", function() {",
													"    pm.expect(jsonData.message).to.eql(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: X-Api-Key\n          in: header\n          description: API key.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n              example:\n                - id: 1\n                  name: Cat\n                - id: 2\n                  name: Dog\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n        petType:\n          type: string\n          enum: [cat, dog, rabbit]\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scheduledJob/CleanOldRequestsJob",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scheduledJob",
												"CleanOldRequestsJob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get scheduled job names",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Correct jobs returned\", function() {",
													"    pm.expect(jsonData.length).to.eql(1);",
													"    pm.expect(jsonData[0]).to.eql(\"CleanOldRequestsJob\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: X-Api-Key\n          in: header\n          description: API key.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n              example:\n                - id: 1\n                  name: Cat\n                - id: 2\n                  name: Dog\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n        petType:\n          type: string\n          enum: [cat, dog, rabbit]\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{rootUrl}}ph-api/scheduledJob",
											"host": [
												"{{rootUrl}}ph-api"
											],
											"path": [
												"scheduledJob"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "4. Separate tests",
					"item": [
						{
							"name": "Scenarios",
							"item": [
								{
									"name": "Bugfix: do not set \"hit count\" to 0",
									"item": [
										{
											"name": "Reset scenarios",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set scenario: hit count is set",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"new-state\",\n    \"hitCount\": 10\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set scenario: hit count is not set",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "text/yaml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"another-new-state\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get scenario: hit count is still the same",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.test(\"Check scenario name\", function () {",
															"    pm.expect(jsonData.scenario).to.eql(\"scenario-1\");",
															"});",
															"pm.test(\"Check scenario state\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"another-new-state\");",
															"});",
															"pm.test(\"Check scenario hit count\", function () {",
															"    pm.expect(jsonData.hitCount).to.eql(10);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set scenario: hit count is set",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "text/yaml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"another-new-state\",\n    \"hitCount\": 11\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get scenario: hit count is updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.test(\"Check scenario name\", function () {",
															"    pm.expect(jsonData.scenario).to.eql(\"scenario-1\");",
															"});",
															"pm.test(\"Check scenario state\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"another-new-state\");",
															"});",
															"pm.test(\"Check scenario hit count\", function () {",
															"    pm.expect(jsonData.hitCount).to.eql(11);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-1",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Bugfix: do not clear \"state\"",
									"item": [
										{
											"name": "Reset scenarios",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set scenario: state is set",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"new-state\",\n    \"hitCount\": 10\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-2",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-2"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set scenario: state is not set",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "text/yaml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"hitCount\": 10\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-2",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-2"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get scenario: state is still the same",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.test(\"Check scenario name\", function () {",
															"    pm.expect(jsonData.scenario).to.eql(\"scenario-2\");",
															"});",
															"pm.test(\"Check scenario state\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"new-state\");",
															"});",
															"pm.test(\"Check scenario hit count\", function () {",
															"    pm.expect(jsonData.hitCount).to.eql(10);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-2",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-2"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set scenario: state is set",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "text/yaml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"another-new-state\",\n    \"hitCount\": 11\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-2",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-2"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get scenario: state is updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.test(\"Check scenario name\", function () {",
															"    pm.expect(jsonData.scenario).to.eql(\"scenario-2\");",
															"});",
															"pm.test(\"Check scenario state\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"another-new-state\");",
															"});",
															"pm.test(\"Check scenario hit count\", function () {",
															"    pm.expect(jsonData.hitCount).to.eql(11);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{rootUrl}}ph-api/scenarios/scenario-2",
													"host": [
														"{{rootUrl}}ph-api"
													],
													"path": [
														"scenarios",
														"scenario-2"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "rootUrl",
			"value": "http://localhost:5000/"
		},
		{
			"key": "rootUrlHttps",
			"value": "https://localhost:5050/"
		}
	]
}