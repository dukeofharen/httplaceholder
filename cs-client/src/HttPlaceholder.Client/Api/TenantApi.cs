/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HttPlaceholder.Client.Client;
using HttPlaceholder.Client.Model;

namespace HttPlaceholder.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns></returns>
        void TenantDeleteAll (string tenant);

        /// <summary>
        /// Deletes all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TenantDeleteAllWithHttpInfo (string tenant);
        /// <summary>
        /// Gets all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>List&lt;FullStubDto&gt;</returns>
        List<FullStubDto> TenantGetAll (string tenant);

        /// <summary>
        /// Gets all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>ApiResponse of List&lt;FullStubDto&gt;</returns>
        ApiResponse<List<FullStubDto>> TenantGetAllWithHttpInfo (string tenant);
        /// <summary>
        /// Gets all available tenant names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> TenantGetTenantNames ();

        /// <summary>
        /// Gets all available tenant names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> TenantGetTenantNamesWithHttpInfo ();
        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns></returns>
        void TenantUpdateAll (string tenant, List<StubDto> stubDto);

        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TenantUpdateAllWithHttpInfo (string tenant, List<StubDto> stubDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TenantDeleteAllAsync (string tenant);

        /// <summary>
        /// Deletes all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TenantDeleteAllAsyncWithHttpInfo (string tenant);
        /// <summary>
        /// Gets all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of List&lt;FullStubDto&gt;</returns>
        System.Threading.Tasks.Task<List<FullStubDto>> TenantGetAllAsync (string tenant);

        /// <summary>
        /// Gets all stubs in a specific tenant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of ApiResponse (List&lt;FullStubDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FullStubDto>>> TenantGetAllAsyncWithHttpInfo (string tenant);
        /// <summary>
        /// Gets all available tenant names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> TenantGetTenantNamesAsync ();

        /// <summary>
        /// Gets all available tenant names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> TenantGetTenantNamesAsyncWithHttpInfo ();
        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TenantUpdateAllAsync (string tenant, List<StubDto> stubDto);

        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TenantUpdateAllAsyncWithHttpInfo (string tenant, List<StubDto> stubDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantApi : ITenantApiSync, ITenantApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantApi : ITenantApi
    {
        private HttPlaceholder.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantApi(String basePath)
        {
            this.Configuration = HttPlaceholder.Client.Client.Configuration.MergeConfigurations(
                HttPlaceholder.Client.Client.GlobalConfiguration.Instance,
                new HttPlaceholder.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HttPlaceholder.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantApi(HttPlaceholder.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HttPlaceholder.Client.Client.Configuration.MergeConfigurations(
                HttPlaceholder.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HttPlaceholder.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TenantApi(HttPlaceholder.Client.Client.ISynchronousClient client,HttPlaceholder.Client.Client.IAsynchronousClient asyncClient, HttPlaceholder.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HttPlaceholder.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HttPlaceholder.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HttPlaceholder.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HttPlaceholder.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HttPlaceholder.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns></returns>
        public void TenantDeleteAll (string tenant)
        {
             TenantDeleteAllWithHttpInfo(tenant);
        }

        /// <summary>
        /// Deletes all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HttPlaceholder.Client.Client.ApiResponse<Object> TenantDeleteAllWithHttpInfo (string tenant)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantApi->TenantDeleteAll");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Tenant", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(tenant)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ph-api/tenants/{Tenant}/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantDeleteAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TenantDeleteAllAsync (string tenant)
        {
             await TenantDeleteAllAsyncWithHttpInfo(tenant);

        }

        /// <summary>
        /// Deletes all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<Object>> TenantDeleteAllAsyncWithHttpInfo (string tenant)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantApi->TenantDeleteAll");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("Tenant", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(tenant)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ph-api/tenants/{Tenant}/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantDeleteAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>List&lt;FullStubDto&gt;</returns>
        public List<FullStubDto> TenantGetAll (string tenant)
        {
             HttPlaceholder.Client.Client.ApiResponse<List<FullStubDto>> localVarResponse = TenantGetAllWithHttpInfo(tenant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>ApiResponse of List&lt;FullStubDto&gt;</returns>
        public HttPlaceholder.Client.Client.ApiResponse< List<FullStubDto> > TenantGetAllWithHttpInfo (string tenant)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantApi->TenantGetAll");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Tenant", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(tenant)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<FullStubDto> >("/ph-api/tenants/{Tenant}/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantGetAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of List&lt;FullStubDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<FullStubDto>> TenantGetAllAsync (string tenant)
        {
             HttPlaceholder.Client.Client.ApiResponse<List<FullStubDto>> localVarResponse = await TenantGetAllAsyncWithHttpInfo(tenant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all stubs in a specific tenant. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <returns>Task of ApiResponse (List&lt;FullStubDto&gt;)</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<List<FullStubDto>>> TenantGetAllAsyncWithHttpInfo (string tenant)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantApi->TenantGetAll");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("Tenant", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(tenant)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FullStubDto>>("/ph-api/tenants/{Tenant}/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantGetAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all available tenant names. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> TenantGetTenantNames ()
        {
             HttPlaceholder.Client.Client.ApiResponse<List<string>> localVarResponse = TenantGetTenantNamesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all available tenant names. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public HttPlaceholder.Client.Client.ApiResponse< List<string> > TenantGetTenantNamesWithHttpInfo ()
        {
            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/ph-api/tenants", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantGetTenantNames", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all available tenant names. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> TenantGetTenantNamesAsync ()
        {
             HttPlaceholder.Client.Client.ApiResponse<List<string>> localVarResponse = await TenantGetTenantNamesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all available tenant names. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<List<string>>> TenantGetTenantNamesAsyncWithHttpInfo ()
        {

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/ph-api/tenants", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantGetTenantNames", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns></returns>
        public void TenantUpdateAll (string tenant, List<StubDto> stubDto)
        {
             TenantUpdateAllWithHttpInfo(tenant, stubDto);
        }

        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HttPlaceholder.Client.Client.ApiResponse<Object> TenantUpdateAllWithHttpInfo (string tenant, List<StubDto> stubDto)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantApi->TenantUpdateAll");

            // verify the required parameter 'stubDto' is set
            if (stubDto == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubDto' when calling TenantApi->TenantUpdateAll");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Tenant", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = stubDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/ph-api/tenants/{Tenant}/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantUpdateAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TenantUpdateAllAsync (string tenant, List<StubDto> stubDto)
        {
             await TenantUpdateAllAsyncWithHttpInfo(tenant, stubDto);

        }

        /// <summary>
        /// Updates the stubs in a specific tenant with the posted values. If a stub that is currently available in a tenant isn&#39;t sent in the request, it will be deleted. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="stubDto"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<Object>> TenantUpdateAllAsyncWithHttpInfo (string tenant, List<StubDto> stubDto)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantApi->TenantUpdateAll");

            // verify the required parameter 'stubDto' is set
            if (stubDto == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubDto' when calling TenantApi->TenantUpdateAll");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("Tenant", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = stubDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/ph-api/tenants/{Tenant}/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantUpdateAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
