/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HttPlaceholder.Client.Client;
using HttPlaceholder.Client.Model;

namespace HttPlaceholder.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStubApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>FullStubDto</returns>
        FullStubDto StubAdd (StubDto stubDto);

        /// <summary>
        /// Adds a new stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>ApiResponse of FullStubDto</returns>
        ApiResponse<FullStubDto> StubAddWithHttpInfo (StubDto stubDto);
        /// <summary>
        /// Delete a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns></returns>
        void StubDelete (string stubId);

        /// <summary>
        /// Delete a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StubDeleteWithHttpInfo (string stubId);
        /// <summary>
        /// Delete ALL stubs. Be careful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void StubDeleteAll ();

        /// <summary>
        /// Delete ALL stubs. Be careful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StubDeleteAllWithHttpInfo ();
        /// <summary>
        /// Get a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>FullStubDto</returns>
        FullStubDto StubGet (string stubId);

        /// <summary>
        /// Get a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>ApiResponse of FullStubDto</returns>
        ApiResponse<FullStubDto> StubGetWithHttpInfo (string stubId);
        /// <summary>
        /// Get all stubs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FullStubDto&gt;</returns>
        List<FullStubDto> StubGetAll ();

        /// <summary>
        /// Get all stubs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FullStubDto&gt;</returns>
        ApiResponse<List<FullStubDto>> StubGetAllWithHttpInfo ();
        /// <summary>
        /// Updates a given stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns></returns>
        void StubUpdate (string stubId, StubDto stubDto);

        /// <summary>
        /// Updates a given stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StubUpdateWithHttpInfo (string stubId, StubDto stubDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStubApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>Task of FullStubDto</returns>
        System.Threading.Tasks.Task<FullStubDto> StubAddAsync (StubDto stubDto);

        /// <summary>
        /// Adds a new stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>Task of ApiResponse (FullStubDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullStubDto>> StubAddAsyncWithHttpInfo (StubDto stubDto);
        /// <summary>
        /// Delete a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StubDeleteAsync (string stubId);

        /// <summary>
        /// Delete a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StubDeleteAsyncWithHttpInfo (string stubId);
        /// <summary>
        /// Delete ALL stubs. Be careful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StubDeleteAllAsync ();

        /// <summary>
        /// Delete ALL stubs. Be careful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StubDeleteAllAsyncWithHttpInfo ();
        /// <summary>
        /// Get a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of FullStubDto</returns>
        System.Threading.Tasks.Task<FullStubDto> StubGetAsync (string stubId);

        /// <summary>
        /// Get a specific stub by stub identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of ApiResponse (FullStubDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullStubDto>> StubGetAsyncWithHttpInfo (string stubId);
        /// <summary>
        /// Get all stubs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FullStubDto&gt;</returns>
        System.Threading.Tasks.Task<List<FullStubDto>> StubGetAllAsync ();

        /// <summary>
        /// Get all stubs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FullStubDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FullStubDto>>> StubGetAllAsyncWithHttpInfo ();
        /// <summary>
        /// Updates a given stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StubUpdateAsync (string stubId, StubDto stubDto);

        /// <summary>
        /// Updates a given stub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StubUpdateAsyncWithHttpInfo (string stubId, StubDto stubDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStubApi : IStubApiSync, IStubApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StubApi : IStubApi
    {
        private HttPlaceholder.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StubApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StubApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StubApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StubApi(String basePath)
        {
            this.Configuration = HttPlaceholder.Client.Client.Configuration.MergeConfigurations(
                HttPlaceholder.Client.Client.GlobalConfiguration.Instance,
                new HttPlaceholder.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HttPlaceholder.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StubApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StubApi(HttPlaceholder.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HttPlaceholder.Client.Client.Configuration.MergeConfigurations(
                HttPlaceholder.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HttPlaceholder.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HttPlaceholder.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StubApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StubApi(HttPlaceholder.Client.Client.ISynchronousClient client,HttPlaceholder.Client.Client.IAsynchronousClient asyncClient, HttPlaceholder.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HttPlaceholder.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HttPlaceholder.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HttPlaceholder.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HttPlaceholder.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HttPlaceholder.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a new stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>FullStubDto</returns>
        public FullStubDto StubAdd (StubDto stubDto)
        {
             HttPlaceholder.Client.Client.ApiResponse<FullStubDto> localVarResponse = StubAddWithHttpInfo(stubDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>ApiResponse of FullStubDto</returns>
        public HttPlaceholder.Client.Client.ApiResponse< FullStubDto > StubAddWithHttpInfo (StubDto stubDto)
        {
            // verify the required parameter 'stubDto' is set
            if (stubDto == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubDto' when calling StubApi->StubAdd");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = stubDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post< FullStubDto >("/ph-api/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubAdd", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a new stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>Task of FullStubDto</returns>
        public async System.Threading.Tasks.Task<FullStubDto> StubAddAsync (StubDto stubDto)
        {
             HttPlaceholder.Client.Client.ApiResponse<FullStubDto> localVarResponse = await StubAddAsyncWithHttpInfo(stubDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubDto"></param>
        /// <returns>Task of ApiResponse (FullStubDto)</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<FullStubDto>> StubAddAsyncWithHttpInfo (StubDto stubDto)
        {
            // verify the required parameter 'stubDto' is set
            if (stubDto == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubDto' when calling StubApi->StubAdd");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = stubDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FullStubDto>("/ph-api/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubAdd", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns></returns>
        public void StubDelete (string stubId)
        {
             StubDeleteWithHttpInfo(stubId);
        }

        /// <summary>
        /// Delete a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HttPlaceholder.Client.Client.ApiResponse<Object> StubDeleteWithHttpInfo (string stubId)
        {
            // verify the required parameter 'stubId' is set
            if (stubId == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubId' when calling StubApi->StubDelete");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("StubId", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(stubId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ph-api/stubs/{StubId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StubDeleteAsync (string stubId)
        {
             await StubDeleteAsyncWithHttpInfo(stubId);

        }

        /// <summary>
        /// Delete a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<Object>> StubDeleteAsyncWithHttpInfo (string stubId)
        {
            // verify the required parameter 'stubId' is set
            if (stubId == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubId' when calling StubApi->StubDelete");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("StubId", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(stubId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ph-api/stubs/{StubId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete ALL stubs. Be careful. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void StubDeleteAll ()
        {
             StubDeleteAllWithHttpInfo();
        }

        /// <summary>
        /// Delete ALL stubs. Be careful. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public HttPlaceholder.Client.Client.ApiResponse<Object> StubDeleteAllWithHttpInfo ()
        {
            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ph-api/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubDeleteAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete ALL stubs. Be careful. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StubDeleteAllAsync ()
        {
             await StubDeleteAllAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete ALL stubs. Be careful. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<Object>> StubDeleteAllAsyncWithHttpInfo ()
        {

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ph-api/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubDeleteAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>FullStubDto</returns>
        public FullStubDto StubGet (string stubId)
        {
             HttPlaceholder.Client.Client.ApiResponse<FullStubDto> localVarResponse = StubGetWithHttpInfo(stubId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>ApiResponse of FullStubDto</returns>
        public HttPlaceholder.Client.Client.ApiResponse< FullStubDto > StubGetWithHttpInfo (string stubId)
        {
            // verify the required parameter 'stubId' is set
            if (stubId == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubId' when calling StubApi->StubGet");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("StubId", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(stubId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< FullStubDto >("/ph-api/stubs/{StubId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of FullStubDto</returns>
        public async System.Threading.Tasks.Task<FullStubDto> StubGetAsync (string stubId)
        {
             HttPlaceholder.Client.Client.ApiResponse<FullStubDto> localVarResponse = await StubGetAsyncWithHttpInfo(stubId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific stub by stub identifier. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId"></param>
        /// <returns>Task of ApiResponse (FullStubDto)</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<FullStubDto>> StubGetAsyncWithHttpInfo (string stubId)
        {
            // verify the required parameter 'stubId' is set
            if (stubId == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubId' when calling StubApi->StubGet");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("StubId", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(stubId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FullStubDto>("/ph-api/stubs/{StubId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all stubs. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FullStubDto&gt;</returns>
        public List<FullStubDto> StubGetAll ()
        {
             HttPlaceholder.Client.Client.ApiResponse<List<FullStubDto>> localVarResponse = StubGetAllWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all stubs. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FullStubDto&gt;</returns>
        public HttPlaceholder.Client.Client.ApiResponse< List<FullStubDto> > StubGetAllWithHttpInfo ()
        {
            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< List<FullStubDto> >("/ph-api/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubGetAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all stubs. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FullStubDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<FullStubDto>> StubGetAllAsync ()
        {
             HttPlaceholder.Client.Client.ApiResponse<List<FullStubDto>> localVarResponse = await StubGetAllAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all stubs. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FullStubDto&gt;)</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<List<FullStubDto>>> StubGetAllAsyncWithHttpInfo ()
        {

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FullStubDto>>("/ph-api/stubs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubGetAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a given stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns></returns>
        public void StubUpdate (string stubId, StubDto stubDto)
        {
             StubUpdateWithHttpInfo(stubId, stubDto);
        }

        /// <summary>
        /// Updates a given stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HttPlaceholder.Client.Client.ApiResponse<Object> StubUpdateWithHttpInfo (string stubId, StubDto stubDto)
        {
            // verify the required parameter 'stubId' is set
            if (stubId == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubId' when calling StubApi->StubUpdate");

            // verify the required parameter 'stubDto' is set
            if (stubDto == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubDto' when calling StubApi->StubUpdate");

            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HttPlaceholder.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("StubId", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(stubId)); // path parameter
            localVarRequestOptions.Data = stubDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/ph-api/stubs/{StubId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a given stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StubUpdateAsync (string stubId, StubDto stubDto)
        {
             await StubUpdateAsyncWithHttpInfo(stubId, stubDto);

        }

        /// <summary>
        /// Updates a given stub. 
        /// </summary>
        /// <exception cref="HttPlaceholder.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stubId">The stub ID.</param>
        /// <param name="stubDto">The posted stub.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HttPlaceholder.Client.Client.ApiResponse<Object>> StubUpdateAsyncWithHttpInfo (string stubId, StubDto stubDto)
        {
            // verify the required parameter 'stubId' is set
            if (stubId == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubId' when calling StubApi->StubUpdate");

            // verify the required parameter 'stubDto' is set
            if (stubDto == null)
                throw new HttPlaceholder.Client.Client.ApiException(400, "Missing required parameter 'stubDto' when calling StubApi->StubUpdate");


            HttPlaceholder.Client.Client.RequestOptions localVarRequestOptions = new HttPlaceholder.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("StubId", HttPlaceholder.Client.Client.ClientUtils.ParameterToString(stubId)); // path parameter
            localVarRequestOptions.Data = stubDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/ph-api/stubs/{StubId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StubUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
