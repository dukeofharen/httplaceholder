/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing all possible response parameters for a stub.
    /// </summary>
    [DataContract]
    public partial class StubResponseDto :  IEquatable<StubResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StubResponseDto" /> class.
        /// </summary>
        /// <param name="enableDynamicMode">Gets or sets whether dynamic mode is on..</param>
        /// <param name="statusCode">Gets or sets the status code..</param>
        /// <param name="contentType">Gets or sets the response content type..</param>
        /// <param name="text">Gets or sets the text..</param>
        /// <param name="base64">Gets or sets the base64..</param>
        /// <param name="file">Gets or sets the file..</param>
        /// <param name="headers">Gets or sets the headers..</param>
        /// <param name="extraDuration">Gets or sets the duration of the extra..</param>
        /// <param name="json">Gets or sets the json..</param>
        /// <param name="xml">Gets or sets the XML..</param>
        /// <param name="html">Gets or sets the HTML..</param>
        /// <param name="temporaryRedirect">Gets or sets the temporary redirect..</param>
        /// <param name="permanentRedirect">Gets or sets the permanent redirect..</param>
        /// <param name="reverseProxy">Gets or sets the reverse proxy settings..</param>
        /// <param name="lineEndings">Gets or sets the line endings type..</param>
        public StubResponseDto(bool? enableDynamicMode = default(bool?), int? statusCode = default(int?), string contentType = default(string), string text = default(string), string base64 = default(string), string file = default(string), Dictionary<string, string> headers = default(Dictionary<string, string>), int? extraDuration = default(int?), string json = default(string), string xml = default(string), string html = default(string), string temporaryRedirect = default(string), string permanentRedirect = default(string), StubResponseReverseProxyDto reverseProxy = default(StubResponseReverseProxyDto), string lineEndings = default(string))
        {
            this.EnableDynamicMode = enableDynamicMode;
            this.StatusCode = statusCode;
            this.ContentType = contentType;
            this.Text = text;
            this.Base64 = base64;
            this.File = file;
            this.Headers = headers;
            this.ExtraDuration = extraDuration;
            this.Json = json;
            this.Xml = xml;
            this.Html = html;
            this.TemporaryRedirect = temporaryRedirect;
            this.PermanentRedirect = permanentRedirect;
            this.ReverseProxy = reverseProxy;
            this.LineEndings = lineEndings;
        }
        
        /// <summary>
        /// Gets or sets whether dynamic mode is on.
        /// </summary>
        /// <value>Gets or sets whether dynamic mode is on.</value>
        [DataMember(Name="enableDynamicMode", EmitDefaultValue=true)]
        public bool? EnableDynamicMode { get; set; }

        /// <summary>
        /// Gets or sets the status code.
        /// </summary>
        /// <value>Gets or sets the status code.</value>
        [DataMember(Name="statusCode", EmitDefaultValue=true)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or sets the response content type.
        /// </summary>
        /// <value>Gets or sets the response content type.</value>
        [DataMember(Name="contentType", EmitDefaultValue=true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        /// <value>Gets or sets the text.</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the base64.
        /// </summary>
        /// <value>Gets or sets the base64.</value>
        [DataMember(Name="base64", EmitDefaultValue=true)]
        public string Base64 { get; set; }

        /// <summary>
        /// Gets or sets the file.
        /// </summary>
        /// <value>Gets or sets the file.</value>
        [DataMember(Name="file", EmitDefaultValue=true)]
        public string File { get; set; }

        /// <summary>
        /// Gets or sets the headers.
        /// </summary>
        /// <value>Gets or sets the headers.</value>
        [DataMember(Name="headers", EmitDefaultValue=true)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Gets or sets the duration of the extra.
        /// </summary>
        /// <value>Gets or sets the duration of the extra.</value>
        [DataMember(Name="extraDuration", EmitDefaultValue=true)]
        public int? ExtraDuration { get; set; }

        /// <summary>
        /// Gets or sets the json.
        /// </summary>
        /// <value>Gets or sets the json.</value>
        [DataMember(Name="json", EmitDefaultValue=true)]
        public string Json { get; set; }

        /// <summary>
        /// Gets or sets the XML.
        /// </summary>
        /// <value>Gets or sets the XML.</value>
        [DataMember(Name="xml", EmitDefaultValue=true)]
        public string Xml { get; set; }

        /// <summary>
        /// Gets or sets the HTML.
        /// </summary>
        /// <value>Gets or sets the HTML.</value>
        [DataMember(Name="html", EmitDefaultValue=true)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or sets the temporary redirect.
        /// </summary>
        /// <value>Gets or sets the temporary redirect.</value>
        [DataMember(Name="temporaryRedirect", EmitDefaultValue=true)]
        public string TemporaryRedirect { get; set; }

        /// <summary>
        /// Gets or sets the permanent redirect.
        /// </summary>
        /// <value>Gets or sets the permanent redirect.</value>
        [DataMember(Name="permanentRedirect", EmitDefaultValue=true)]
        public string PermanentRedirect { get; set; }

        /// <summary>
        /// Gets or sets the reverse proxy settings.
        /// </summary>
        /// <value>Gets or sets the reverse proxy settings.</value>
        [DataMember(Name="reverseProxy", EmitDefaultValue=true)]
        public StubResponseReverseProxyDto ReverseProxy { get; set; }

        /// <summary>
        /// Gets or sets the line endings type.
        /// </summary>
        /// <value>Gets or sets the line endings type.</value>
        [DataMember(Name="lineEndings", EmitDefaultValue=true)]
        public string LineEndings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StubResponseDto {\n");
            sb.Append("  EnableDynamicMode: ").Append(EnableDynamicMode).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Base64: ").Append(Base64).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  ExtraDuration: ").Append(ExtraDuration).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  TemporaryRedirect: ").Append(TemporaryRedirect).Append("\n");
            sb.Append("  PermanentRedirect: ").Append(PermanentRedirect).Append("\n");
            sb.Append("  ReverseProxy: ").Append(ReverseProxy).Append("\n");
            sb.Append("  LineEndings: ").Append(LineEndings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StubResponseDto);
        }

        /// <summary>
        /// Returns true if StubResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StubResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StubResponseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableDynamicMode == input.EnableDynamicMode ||
                    (this.EnableDynamicMode != null &&
                    this.EnableDynamicMode.Equals(input.EnableDynamicMode))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Base64 == input.Base64 ||
                    (this.Base64 != null &&
                    this.Base64.Equals(input.Base64))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.ExtraDuration == input.ExtraDuration ||
                    (this.ExtraDuration != null &&
                    this.ExtraDuration.Equals(input.ExtraDuration))
                ) && 
                (
                    this.Json == input.Json ||
                    (this.Json != null &&
                    this.Json.Equals(input.Json))
                ) && 
                (
                    this.Xml == input.Xml ||
                    (this.Xml != null &&
                    this.Xml.Equals(input.Xml))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.TemporaryRedirect == input.TemporaryRedirect ||
                    (this.TemporaryRedirect != null &&
                    this.TemporaryRedirect.Equals(input.TemporaryRedirect))
                ) && 
                (
                    this.PermanentRedirect == input.PermanentRedirect ||
                    (this.PermanentRedirect != null &&
                    this.PermanentRedirect.Equals(input.PermanentRedirect))
                ) && 
                (
                    this.ReverseProxy == input.ReverseProxy ||
                    (this.ReverseProxy != null &&
                    this.ReverseProxy.Equals(input.ReverseProxy))
                ) && 
                (
                    this.LineEndings == input.LineEndings ||
                    (this.LineEndings != null &&
                    this.LineEndings.Equals(input.LineEndings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableDynamicMode != null)
                    hashCode = hashCode * 59 + this.EnableDynamicMode.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Base64 != null)
                    hashCode = hashCode * 59 + this.Base64.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.ExtraDuration != null)
                    hashCode = hashCode * 59 + this.ExtraDuration.GetHashCode();
                if (this.Json != null)
                    hashCode = hashCode * 59 + this.Json.GetHashCode();
                if (this.Xml != null)
                    hashCode = hashCode * 59 + this.Xml.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.TemporaryRedirect != null)
                    hashCode = hashCode * 59 + this.TemporaryRedirect.GetHashCode();
                if (this.PermanentRedirect != null)
                    hashCode = hashCode * 59 + this.PermanentRedirect.GetHashCode();
                if (this.ReverseProxy != null)
                    hashCode = hashCode * 59 + this.ReverseProxy.GetHashCode();
                if (this.LineEndings != null)
                    hashCode = hashCode * 59 + this.LineEndings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
