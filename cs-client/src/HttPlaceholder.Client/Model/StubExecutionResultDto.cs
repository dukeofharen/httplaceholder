/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing all execution related data for a given stub.
    /// </summary>
    [DataContract]
    public partial class StubExecutionResultDto :  IEquatable<StubExecutionResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StubExecutionResultDto" /> class.
        /// </summary>
        /// <param name="stubId">Gets or sets the stub identifier..</param>
        /// <param name="passed">Gets or sets a value indicating whether this StubExecutionResultDto is passed..</param>
        /// <param name="conditions">Gets or sets the conditions..</param>
        public StubExecutionResultDto(string stubId = default(string), bool passed = default(bool), List<ConditionCheckResultDto> conditions = default(List<ConditionCheckResultDto>))
        {
            this.StubId = stubId;
            this.Passed = passed;
            this.Conditions = conditions;
        }
        
        /// <summary>
        /// Gets or sets the stub identifier.
        /// </summary>
        /// <value>Gets or sets the stub identifier.</value>
        [DataMember(Name="stubId", EmitDefaultValue=true)]
        public string StubId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this StubExecutionResultDto is passed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this StubExecutionResultDto is passed.</value>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public bool Passed { get; set; }

        /// <summary>
        /// Gets or sets the conditions.
        /// </summary>
        /// <value>Gets or sets the conditions.</value>
        [DataMember(Name="conditions", EmitDefaultValue=true)]
        public List<ConditionCheckResultDto> Conditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StubExecutionResultDto {\n");
            sb.Append("  StubId: ").Append(StubId).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StubExecutionResultDto);
        }

        /// <summary>
        /// Returns true if StubExecutionResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StubExecutionResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StubExecutionResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StubId == input.StubId ||
                    (this.StubId != null &&
                    this.StubId.Equals(input.StubId))
                ) && 
                (
                    this.Passed == input.Passed ||
                    this.Passed.Equals(input.Passed)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StubId != null)
                    hashCode = hashCode * 59 + this.StubId.GetHashCode();
                hashCode = hashCode * 59 + this.Passed.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
