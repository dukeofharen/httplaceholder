/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing reverse proxy settings.
    /// </summary>
    [DataContract]
    public partial class StubResponseReverseProxyDto :  IEquatable<StubResponseReverseProxyDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StubResponseReverseProxyDto" /> class.
        /// </summary>
        /// <param name="url">Gets or sets the URL where the request should be sent to. The request will be sent to exactly this URL..</param>
        /// <param name="appendQueryString">Gets or sets whether the query string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL..</param>
        /// <param name="appendPath">Gets or sets whether the path string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL..</param>
        /// <param name="replaceRootUrl">Gets or sets whether the root URL of the response of the target web service should be replaced with the root URL of HttPlaceholder..</param>
        public StubResponseReverseProxyDto(string url = default(string), bool? appendQueryString = default(bool?), bool? appendPath = default(bool?), bool? replaceRootUrl = default(bool?))
        {
            this.Url = url;
            this.AppendQueryString = appendQueryString;
            this.AppendPath = appendPath;
            this.ReplaceRootUrl = replaceRootUrl;
        }
        
        /// <summary>
        /// Gets or sets the URL where the request should be sent to. The request will be sent to exactly this URL.
        /// </summary>
        /// <value>Gets or sets the URL where the request should be sent to. The request will be sent to exactly this URL.</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets whether the query string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL.
        /// </summary>
        /// <value>Gets or sets whether the query string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL.</value>
        [DataMember(Name="appendQueryString", EmitDefaultValue=true)]
        public bool? AppendQueryString { get; set; }

        /// <summary>
        /// Gets or sets whether the path string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL.
        /// </summary>
        /// <value>Gets or sets whether the path string of the request to HttPlaceholder should be appended to the string that will be send to the proxy URL.</value>
        [DataMember(Name="appendPath", EmitDefaultValue=true)]
        public bool? AppendPath { get; set; }

        /// <summary>
        /// Gets or sets whether the root URL of the response of the target web service should be replaced with the root URL of HttPlaceholder.
        /// </summary>
        /// <value>Gets or sets whether the root URL of the response of the target web service should be replaced with the root URL of HttPlaceholder.</value>
        [DataMember(Name="replaceRootUrl", EmitDefaultValue=true)]
        public bool? ReplaceRootUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StubResponseReverseProxyDto {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AppendQueryString: ").Append(AppendQueryString).Append("\n");
            sb.Append("  AppendPath: ").Append(AppendPath).Append("\n");
            sb.Append("  ReplaceRootUrl: ").Append(ReplaceRootUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StubResponseReverseProxyDto);
        }

        /// <summary>
        /// Returns true if StubResponseReverseProxyDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StubResponseReverseProxyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StubResponseReverseProxyDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AppendQueryString == input.AppendQueryString ||
                    (this.AppendQueryString != null &&
                    this.AppendQueryString.Equals(input.AppendQueryString))
                ) && 
                (
                    this.AppendPath == input.AppendPath ||
                    (this.AppendPath != null &&
                    this.AppendPath.Equals(input.AppendPath))
                ) && 
                (
                    this.ReplaceRootUrl == input.ReplaceRootUrl ||
                    (this.ReplaceRootUrl != null &&
                    this.ReplaceRootUrl.Equals(input.ReplaceRootUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.AppendQueryString != null)
                    hashCode = hashCode * 59 + this.AppendQueryString.GetHashCode();
                if (this.AppendPath != null)
                    hashCode = hashCode * 59 + this.AppendPath.GetHashCode();
                if (this.ReplaceRootUrl != null)
                    hashCode = hashCode * 59 + this.ReplaceRootUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
