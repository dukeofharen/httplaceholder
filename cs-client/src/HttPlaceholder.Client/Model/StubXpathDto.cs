/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing information about the XPath condition checker.
    /// </summary>
    [DataContract]
    public partial class StubXpathDto :  IEquatable<StubXpathDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StubXpathDto" /> class.
        /// </summary>
        /// <param name="queryString">Gets or sets the query string..</param>
        /// <param name="namespaces">Gets or sets the namespaces..</param>
        public StubXpathDto(string queryString = default(string), Dictionary<string, string> namespaces = default(Dictionary<string, string>))
        {
            this.QueryString = queryString;
            this.Namespaces = namespaces;
        }
        
        /// <summary>
        /// Gets or sets the query string.
        /// </summary>
        /// <value>Gets or sets the query string.</value>
        [DataMember(Name="queryString", EmitDefaultValue=true)]
        public string QueryString { get; set; }

        /// <summary>
        /// Gets or sets the namespaces.
        /// </summary>
        /// <value>Gets or sets the namespaces.</value>
        [DataMember(Name="namespaces", EmitDefaultValue=true)]
        public Dictionary<string, string> Namespaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StubXpathDto {\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("  Namespaces: ").Append(Namespaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StubXpathDto);
        }

        /// <summary>
        /// Returns true if StubXpathDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StubXpathDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StubXpathDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryString == input.QueryString ||
                    (this.QueryString != null &&
                    this.QueryString.Equals(input.QueryString))
                ) && 
                (
                    this.Namespaces == input.Namespaces ||
                    this.Namespaces != null &&
                    input.Namespaces != null &&
                    this.Namespaces.SequenceEqual(input.Namespaces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryString != null)
                    hashCode = hashCode * 59 + this.QueryString.GetHashCode();
                if (this.Namespaces != null)
                    hashCode = hashCode * 59 + this.Namespaces.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
