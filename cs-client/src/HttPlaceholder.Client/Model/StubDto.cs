/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing all information about a stub.
    /// </summary>
    [DataContract]
    public partial class StubDto :  IEquatable<StubDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StubDto" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier..</param>
        /// <param name="conditions">Gets or sets the conditions..</param>
        /// <param name="response">Gets or sets the response..</param>
        /// <param name="priority">Gets or sets the priority..</param>
        /// <param name="tenant">Gets or sets the tenant..</param>
        /// <param name="description">Gets or sets the description..</param>
        /// <param name="enabled">Gets or sets whether this stub is enabled or not..</param>
        public StubDto(string id = default(string), StubConditionsDto conditions = default(StubConditionsDto), StubResponseDto response = default(StubResponseDto), int priority = default(int), string tenant = default(string), string description = default(string), bool enabled = default(bool))
        {
            this.Id = id;
            this.Conditions = conditions;
            this.Response = response;
            this.Priority = priority;
            this.Tenant = tenant;
            this.Description = description;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>Gets or sets the identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the conditions.
        /// </summary>
        /// <value>Gets or sets the conditions.</value>
        [DataMember(Name="conditions", EmitDefaultValue=true)]
        public StubConditionsDto Conditions { get; set; }

        /// <summary>
        /// Gets or sets the response.
        /// </summary>
        /// <value>Gets or sets the response.</value>
        [DataMember(Name="response", EmitDefaultValue=true)]
        public StubResponseDto Response { get; set; }

        /// <summary>
        /// Gets or sets the priority.
        /// </summary>
        /// <value>Gets or sets the priority.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets the tenant.
        /// </summary>
        /// <value>Gets or sets the tenant.</value>
        [DataMember(Name="tenant", EmitDefaultValue=true)]
        public string Tenant { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets whether this stub is enabled or not.
        /// </summary>
        /// <value>Gets or sets whether this stub is enabled or not.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StubDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StubDto);
        }

        /// <summary>
        /// Returns true if StubDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StubDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StubDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    (this.Conditions != null &&
                    this.Conditions.Equals(input.Conditions))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
