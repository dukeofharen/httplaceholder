/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing the base properties of a request.
    /// </summary>
    [DataContract]
    public partial class RequestOverviewDto :  IEquatable<RequestOverviewDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestOverviewDto" /> class.
        /// </summary>
        /// <param name="correlationId">Gets or sets the correlation identifier..</param>
        /// <param name="method">Gets or sets the method..</param>
        /// <param name="url">Gets or sets the URL..</param>
        /// <param name="executingStubId">Gets or sets the executing stub identifier..</param>
        /// <param name="stubTenant">Gets or sets the tenant name of the stub..</param>
        /// <param name="requestBeginTime">Gets or sets the request begin time..</param>
        /// <param name="requestEndTime">Gets or sets the request end time..</param>
        public RequestOverviewDto(string correlationId = default(string), string method = default(string), string url = default(string), string executingStubId = default(string), string stubTenant = default(string), DateTime requestBeginTime = default(DateTime), DateTime requestEndTime = default(DateTime))
        {
            this.CorrelationId = correlationId;
            this.Method = method;
            this.Url = url;
            this.ExecutingStubId = executingStubId;
            this.StubTenant = stubTenant;
            this.RequestBeginTime = requestBeginTime;
            this.RequestEndTime = requestEndTime;
        }
        
        /// <summary>
        /// Gets or sets the correlation identifier.
        /// </summary>
        /// <value>Gets or sets the correlation identifier.</value>
        [DataMember(Name="correlationId", EmitDefaultValue=true)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or sets the method.
        /// </summary>
        /// <value>Gets or sets the method.</value>
        [DataMember(Name="method", EmitDefaultValue=true)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets the URL.
        /// </summary>
        /// <value>Gets or sets the URL.</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the executing stub identifier.
        /// </summary>
        /// <value>Gets or sets the executing stub identifier.</value>
        [DataMember(Name="executingStubId", EmitDefaultValue=true)]
        public string ExecutingStubId { get; set; }

        /// <summary>
        /// Gets or sets the tenant name of the stub.
        /// </summary>
        /// <value>Gets or sets the tenant name of the stub.</value>
        [DataMember(Name="stubTenant", EmitDefaultValue=true)]
        public string StubTenant { get; set; }

        /// <summary>
        /// Gets or sets the request begin time.
        /// </summary>
        /// <value>Gets or sets the request begin time.</value>
        [DataMember(Name="requestBeginTime", EmitDefaultValue=false)]
        public DateTime RequestBeginTime { get; set; }

        /// <summary>
        /// Gets or sets the request end time.
        /// </summary>
        /// <value>Gets or sets the request end time.</value>
        [DataMember(Name="requestEndTime", EmitDefaultValue=false)]
        public DateTime RequestEndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestOverviewDto {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ExecutingStubId: ").Append(ExecutingStubId).Append("\n");
            sb.Append("  StubTenant: ").Append(StubTenant).Append("\n");
            sb.Append("  RequestBeginTime: ").Append(RequestBeginTime).Append("\n");
            sb.Append("  RequestEndTime: ").Append(RequestEndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestOverviewDto);
        }

        /// <summary>
        /// Returns true if RequestOverviewDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestOverviewDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestOverviewDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ExecutingStubId == input.ExecutingStubId ||
                    (this.ExecutingStubId != null &&
                    this.ExecutingStubId.Equals(input.ExecutingStubId))
                ) && 
                (
                    this.StubTenant == input.StubTenant ||
                    (this.StubTenant != null &&
                    this.StubTenant.Equals(input.StubTenant))
                ) && 
                (
                    this.RequestBeginTime == input.RequestBeginTime ||
                    (this.RequestBeginTime != null &&
                    this.RequestBeginTime.Equals(input.RequestBeginTime))
                ) && 
                (
                    this.RequestEndTime == input.RequestEndTime ||
                    (this.RequestEndTime != null &&
                    this.RequestEndTime.Equals(input.RequestEndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ExecutingStubId != null)
                    hashCode = hashCode * 59 + this.ExecutingStubId.GetHashCode();
                if (this.StubTenant != null)
                    hashCode = hashCode * 59 + this.StubTenant.GetHashCode();
                if (this.RequestBeginTime != null)
                    hashCode = hashCode * 59 + this.RequestBeginTime.GetHashCode();
                if (this.RequestEndTime != null)
                    hashCode = hashCode * 59 + this.RequestEndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
