/* 
 * HttPlaceholder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HttPlaceholder.Client.Client.OpenAPIDateConverter;

namespace HttPlaceholder.Client.Model
{
    /// <summary>
    /// A model for storing settings about the stub image that should be generated.
    /// </summary>
    [DataContract]
    public partial class StubResponseImageDto :  IEquatable<StubResponseImageDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StubResponseImageDto" /> class.
        /// </summary>
        /// <param name="type">Gets or sets the image type. Possibilities: jpeg, png, bmp and gif..</param>
        /// <param name="width">Gets or sets the image width in pixels..</param>
        /// <param name="height">Gets or sets the image height in pixels..</param>
        /// <param name="backgroundColor">Gets or sets the background color in HEX..</param>
        /// <param name="text">Gets or sets the text that should be drawn in the image..</param>
        /// <param name="fontSize">Gets or sets the fontsize for the text in the image..</param>
        /// <param name="fontColor">Gets or sets the font color..</param>
        /// <param name="jpegQuality">Gets or sets the image quality in the case of JPEG image..</param>
        /// <param name="wordWrap">Gets or sets whether the text should be wrapped across the image or not..</param>
        public StubResponseImageDto(string type = default(string), int width = default(int), int height = default(int), string backgroundColor = default(string), string text = default(string), int fontSize = default(int), string fontColor = default(string), int jpegQuality = default(int), bool wordWrap = default(bool))
        {
            this.Type = type;
            this.Width = width;
            this.Height = height;
            this.BackgroundColor = backgroundColor;
            this.Text = text;
            this.FontSize = fontSize;
            this.FontColor = fontColor;
            this.JpegQuality = jpegQuality;
            this.WordWrap = wordWrap;
        }
        
        /// <summary>
        /// Gets or sets the image type. Possibilities: jpeg, png, bmp and gif.
        /// </summary>
        /// <value>Gets or sets the image type. Possibilities: jpeg, png, bmp and gif.</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the image width in pixels.
        /// </summary>
        /// <value>Gets or sets the image width in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or sets the image height in pixels.
        /// </summary>
        /// <value>Gets or sets the image height in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or sets the background color in HEX.
        /// </summary>
        /// <value>Gets or sets the background color in HEX.</value>
        [DataMember(Name="backgroundColor", EmitDefaultValue=true)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or sets the text that should be drawn in the image.
        /// </summary>
        /// <value>Gets or sets the text that should be drawn in the image.</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the fontsize for the text in the image.
        /// </summary>
        /// <value>Gets or sets the fontsize for the text in the image.</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public int FontSize { get; set; }

        /// <summary>
        /// Gets or sets the font color.
        /// </summary>
        /// <value>Gets or sets the font color.</value>
        [DataMember(Name="fontColor", EmitDefaultValue=true)]
        public string FontColor { get; set; }

        /// <summary>
        /// Gets or sets the image quality in the case of JPEG image.
        /// </summary>
        /// <value>Gets or sets the image quality in the case of JPEG image.</value>
        [DataMember(Name="jpegQuality", EmitDefaultValue=false)]
        public int JpegQuality { get; set; }

        /// <summary>
        /// Gets or sets whether the text should be wrapped across the image or not.
        /// </summary>
        /// <value>Gets or sets whether the text should be wrapped across the image or not.</value>
        [DataMember(Name="wordWrap", EmitDefaultValue=false)]
        public bool WordWrap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StubResponseImageDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  FontColor: ").Append(FontColor).Append("\n");
            sb.Append("  JpegQuality: ").Append(JpegQuality).Append("\n");
            sb.Append("  WordWrap: ").Append(WordWrap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StubResponseImageDto);
        }

        /// <summary>
        /// Returns true if StubResponseImageDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StubResponseImageDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StubResponseImageDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    this.FontSize.Equals(input.FontSize)
                ) && 
                (
                    this.FontColor == input.FontColor ||
                    (this.FontColor != null &&
                    this.FontColor.Equals(input.FontColor))
                ) && 
                (
                    this.JpegQuality == input.JpegQuality ||
                    this.JpegQuality.Equals(input.JpegQuality)
                ) && 
                (
                    this.WordWrap == input.WordWrap ||
                    this.WordWrap.Equals(input.WordWrap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.BackgroundColor != null)
                    hashCode = hashCode * 59 + this.BackgroundColor.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.FontColor != null)
                    hashCode = hashCode * 59 + this.FontColor.GetHashCode();
                hashCode = hashCode * 59 + this.JpegQuality.GetHashCode();
                hashCode = hashCode * 59 + this.WordWrap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
