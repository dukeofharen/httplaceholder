# Simple GET situations. Execute 01-get.sh to execute the requests.
- id: situation-01
  conditions:
    method: GET
    url:
      path: /users
      query:
        id: 12
        filter: first_name
  response:
    statusCode: 200
    text: |
      {
        "first_name": "John"
      }
    headers:
      Content-Type: application/json

- id: situation-02
  conditions:
    method: GET
    url:
      path: /users
      query:
        id: 14
        filter: last_name
  response:
    statusCode: 200
    text: |
      {
        "last_name": "Jackson"
      }
    headers:
      Content-Type: application/json

# Same as the scenario above, but this configuration uses the "negativeConditions". In this case, if a query parameter last_name: Johnson is added, the configuration will NOT be executed.
- id: situation-03
  conditions:
    method: GET
    url:
      path: /users
      query:
        id: 15
        filter: last_name
  negativeConditions:
    url:
      query:
        last_name: Johnson
  response:
    statusCode: 200
    text: |
      {
        "last_name": "Jackson"
      }
    headers:
      Content-Type: application/json

# Use fullPath instead of path to set a condition on the complete path including query string.
- id: situation-04
  conditions:
    method: GET
    url:
      fullPath: /users?filter=first_name
  response:
    statusCode: 200
    text: |
      {
        "first_name": "Sjaak"
      }
    headers:
      Content-Type: application/json

# This is essentially the "fallback" scenario of the /users endpoint.
- id: situation-fallback
  conditions:
    method: GET
    url:
      path: /users
      query:
        id: ^[0-9]+$
  response:
    statusCode: 404
    headers:
      Content-Type: application/json